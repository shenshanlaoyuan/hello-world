<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[如何设计一个消息队列？]]></title>
      <url>http://shenshanlaoyuan.com/2020/05/05/%E9%9D%A2%E8%AF%95/2020-5-5-%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%EF%BC%9F/</url>
      <content type="html"><![CDATA[<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>如果让你写一个消息队列，该如何进行架构设计？说一下你的思路。</p>
<h2 id="面试官心理分析"><a href="#面试官心理分析" class="headerlink" title="面试官心理分析"></a>面试官心理分析</h2><p>其实聊到这个问题，一般面试官要考察两块：</p>
<ul>
<li>你有没有对某一个消息队列做过较为深入的原理的了解，或者从整体了解把握住一个消息队列的架构原理。</li>
<li>看看你的设计能力，给你一个常见的系统，就是消息队列系统，看看你能不能从全局把握一下整体架构设计，给出一些关键点出来。</li>
</ul>
<p>说实话，问类似问题的时候，大部分人基本都会蒙，因为平时从来没有思考过类似的问题，<strong>大多数人就是平时埋头用，从来不去思考背后的一些东西</strong>。类似的问题，比如，如果让你来设计一个 Spring 框架你会怎么做？如果让你来设计一个 Dubbo 框架你会怎么做？如果让你来设计一个 MyBatis 框架你会怎么做？</p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2020/05/05/面试/2020-5-5-如何设计一个消息队列？/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2020/05/05/面试/2020-5-5-如何设计一个消息队列？/'>如何设计一个消息队列？</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>
 
<h2 id="面试题剖析"><a href="#面试题剖析" class="headerlink" title="面试题剖析"></a>面试题剖析</h2><p>其实回答这类问题，说白了，不求你看过那技术的源码，起码你要大概知道那个技术的基本原理、核心组成部分、基本架构构成，然后参照一些开源的技术把一个系统设计出来的思路说一下就好。</p>
<p>比如说这个消息队列系统，我们从以下几个角度来考虑一下：</p>
<ul>
<li><p>首先这个 mq 得支持可伸缩性吧，就是需要的时候快速扩容，就可以增加吞吐量和容量，那怎么搞？设计个分布式的系统呗，参照一下 kafka 的设计理念，broker -&gt; topic -&gt; partition，每个 partition 放一个机器，就存一部分数据。如果现在资源不够了，简单啊，给 topic 增加 partition，然后做数据迁移，增加机器，不就可以存放更多数据，提供更高的吞吐量了？</p>
</li>
<li><p>其次你得考虑一下这个 mq 的数据要不要落地磁盘吧？那肯定要了，落磁盘才能保证别进程挂了数据就丢了。那落磁盘的时候怎么落啊？顺序写，这样就没有磁盘随机读写的寻址开销，磁盘顺序读写的性能是很高的，这就是 kafka 的思路。</p>
</li>
<li><p>其次你考虑一下你的 mq 的可用性啊？这个事儿，具体参考之前可用性那个环节讲解的 kafka 的高可用保障机制。多副本 -&gt; leader &amp; follower -&gt; broker 挂了重新选举 leader 即可对外服务。</p>
</li>
<li><p>能不能支持数据 0 丢失啊？可以的，参考我们之前说的那个 kafka 数据零丢失方案。</p>
</li>
</ul>
<p>mq 肯定是很复杂的，面试官问你这个问题，其实是个开放题，他就是看看你有没有从架构角度整体构思和设计的思维以及能力。确实这个问题可以刷掉一大批人，因为大部分人平时不思考这些东西。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何解决消息队列的延时以及过期失效问题？]]></title>
      <url>http://shenshanlaoyuan.com/2020/05/04/%E9%9D%A2%E8%AF%95/2020-5-4-%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%BB%B6%E6%97%B6%E4%BB%A5%E5%8F%8A%E8%BF%87%E6%9C%9F%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98%EF%BC%9F/</url>
      <content type="html"><![CDATA[<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？有几百万消息持续积压几小时，说说怎么解决？</p>
<h2 id="面试官心理分析"><a href="#面试官心理分析" class="headerlink" title="面试官心理分析"></a>面试官心理分析</h2><p>你看这问法，其实本质针对的场景，都是说，可能你的消费端出了问题，不消费了；或者消费的速度极其慢。接着就坑爹了，可能你的消息队列集群的磁盘都快写满了，都没人消费，这个时候怎么办？或者是这整个就积压了几个小时，你这个时候怎么办？或者是你积压的时间太长了，导致比如 RabbitMQ 设置了消息过期时间后就没了怎么办？</p>
<p>所以就这事儿，其实线上挺常见的，一般不出，一出就是大 case。一般常见于，举个例子，消费端每次消费之后要写 mysql，结果 mysql 挂了，消费端 hang 那儿了，不动了；或者是消费端出了个什么岔子，导致消费速度极其慢。</p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2020/05/04/面试/2020-5-4-如何解决消息队列的延时以及过期失效问题？/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2020/05/04/面试/2020-5-4-如何解决消息队列的延时以及过期失效问题？/'>如何解决消息队列的延时以及过期失效问题？</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>
 
<h2 id="面试题剖析"><a href="#面试题剖析" class="headerlink" title="面试题剖析"></a>面试题剖析</h2><p>关于这个事儿，我们一个一个来梳理吧，先假设一个场景，我们现在消费端出故障了，然后大量消息在 mq 里积压，现在出事故了，慌了。</p>
<h3 id="大量消息在-mq-里积压了几个小时了还没解决"><a href="#大量消息在-mq-里积压了几个小时了还没解决" class="headerlink" title="大量消息在 mq 里积压了几个小时了还没解决"></a>大量消息在 mq 里积压了几个小时了还没解决</h3><p>几千万条数据在 MQ 里积压了七八个小时，从下午 4 点多，积压到了晚上 11 点多。这个是我们真实遇到过的一个场景，确实是线上故障了，这个时候要不然就是修复 consumer 的问题，让它恢复消费速度，然后傻傻的等待几个小时消费完毕。这个肯定不能在面试的时候说吧。</p>
<p>一个消费者一秒是 1000 条，一秒 3 个消费者是 3000 条，一分钟就是 18 万条。所以如果你积压了几百万到上千万的数据，即使消费者恢复了，也需要大概 1 小时的时间才能恢复过来。</p>
<p>一般这个时候，只能临时紧急扩容了，具体操作步骤和思路如下：</p>
<ul>
<li>先修复 consumer 的问题，确保其恢复消费速度，然后将现有 consumer 都停掉。</li>
<li>新建一个 topic，partition 是原来的 10 倍，临时建立好原先 10 倍的 queue 数量。</li>
<li>然后写一个临时的分发数据的 consumer 程序，这个程序部署上去消费积压的数据，<strong>消费之后不做耗时的处理</strong>，直接均匀轮询写入临时建立好的 10 倍数量的 queue。</li>
<li>接着临时征用 10 倍的机器来部署 consumer，每一批 consumer 消费一个临时 queue 的数据。这种做法相当于是临时将 queue 资源和 consumer 资源扩大 10 倍，以正常的 10 倍速度来消费数据。</li>
<li>等快速消费完积压数据之后，<strong>得恢复原先部署的架构</strong>，<strong>重新</strong>用原先的 consumer 机器来消费消息。</li>
</ul>
<h3 id="mq-中的消息过期失效了"><a href="#mq-中的消息过期失效了" class="headerlink" title="mq 中的消息过期失效了"></a>mq 中的消息过期失效了</h3><p>假设你用的是 RabbitMQ，RabbtiMQ 是可以设置过期时间的，也就是 TTL。如果消息在 queue 中积压超过一定的时间就会被 RabbitMQ 给清理掉，这个数据就没了。那这就是第二个坑了。这就不是说数据会大量积压在 mq 里，而是<strong>大量的数据会直接搞丢</strong>。</p>
<p>这个情况下，就不是说要增加 consumer 消费积压的消息，因为实际上没啥积压，而是丢了大量的消息。我们可以采取一个方案，就是<strong>批量重导</strong>，这个我们之前线上也有类似的场景干过。就是大量积压的时候，我们当时就直接丢弃数据了，然后等过了高峰期以后，比如大家一起喝咖啡熬夜到晚上12点以后，用户都睡觉了。这个时候我们就开始写程序，将丢失的那批数据，写个临时程序，一点一点的查出来，然后重新灌入 mq 里面去，把白天丢的数据给他补回来。也只能是这样了。</p>
<p>假设 1 万个订单积压在 mq 里面，没有处理，其中 1000 个订单都丢了，你只能手动写程序把那 1000 个订单给查出来，手动发到 mq 里去再补一次。</p>
<h3 id="mq-都快写满了"><a href="#mq-都快写满了" class="headerlink" title="mq 都快写满了"></a>mq 都快写满了</h3><p>如果消息积压在 mq 里，你很长时间都没有处理掉，此时导致 mq 都快写满了，咋办？这个还有别的办法吗？没有，谁让你第一个方案执行的太慢了，你临时写程序，接入数据来消费，<strong>消费一个丢弃一个，都不要了</strong>，快速消费掉所有的消息。然后走第二个方案，到了晚上再补数据吧。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何保证消息的顺序性？]]></title>
      <url>http://shenshanlaoyuan.com/2020/05/03/%E9%9D%A2%E8%AF%95/2020-5-3-%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E7%9A%84%E9%A1%BA%E5%BA%8F%E6%80%A7%EF%BC%9F/</url>
      <content type="html"><![CDATA[<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>如何保证消息的顺序性？</p>
<h2 id="面试官心理分析"><a href="#面试官心理分析" class="headerlink" title="面试官心理分析"></a>面试官心理分析</h2><p>其实这个也是用 MQ 的时候必问的话题，第一看看你了不了解顺序这个事儿？第二看看你有没有办法保证消息是有顺序的？这是生产系统中常见的问题。</p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2020/05/03/面试/2020-5-3-如何保证消息的顺序性？/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2020/05/03/面试/2020-5-3-如何保证消息的顺序性？/'>如何保证消息的顺序性？</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>
 
<h2 id="面试题剖析"><a href="#面试题剖析" class="headerlink" title="面试题剖析"></a>面试题剖析</h2><p>我举个例子，我们以前做过一个 mysql <code>binlog</code> 同步的系统，压力还是非常大的，日同步数据要达到上亿，就是说数据从一个 mysql 库原封不动地同步到另一个 mysql 库里面去（mysql -&gt; mysql）。常见的一点在于说比如大数据 team，就需要同步一个 mysql 库过来，对公司的业务系统的数据做各种复杂的操作。</p>
<p>你在 mysql 里增删改一条数据，对应出来了增删改 3 条 <code>binlog</code> 日志，接着这三条 <code>binlog</code> 发送到 MQ 里面，再消费出来依次执行，起码得保证人家是按照顺序来的吧？不然本来是：增加、修改、删除；你愣是换了顺序给执行成删除、修改、增加，不全错了么。</p>
<p>本来这个数据同步过来，应该最后这个数据被删除了；结果你搞错了这个顺序，最后这个数据保留下来了，数据同步就出错了。</p>
<p>先看看顺序会错乱的俩场景：</p>
<ul>
<li><strong>RabbitMQ</strong>：一个 queue，多个 consumer。比如，生产者向 RabbitMQ 里发送了三条数据，顺序依次是 data1/data2/data3，压入的是 RabbitMQ 的一个内存队列。有三个消费者分别从 MQ 中消费这三条数据中的一条，结果消费者2先执行完操作，把 data2 存入数据库，然后是 data1/data3。这不明显乱了。</li>
</ul>
<p><img src="https://i.loli.net/2020/04/29/Ptz35FAOmhpbKLo.png" alt="rabbitmq-order-01.png"></p>
<ul>
<li><strong>Kafka</strong>：比如说我们建了一个 topic，有三个 partition。生产者在写的时候，其实可以指定一个 key，比如说我们指定了某个订单 id 作为 key，那么这个订单相关的数据，一定会被分发到同一个 partition 中去，而且这个 partition 中的数据一定是有顺序的。<br>消费者从 partition 中取出来数据的时候，也一定是有顺序的。到这里，顺序还是 ok 的，没有错乱。接着，我们在消费者里可能会搞<strong>多个线程来并发处理消息</strong>。因为如果消费者是单线程消费处理，而处理比较耗时的话，比如处理一条消息耗时几十 ms，那么 1 秒钟只能处理几十条消息，这吞吐量太低了。而多个线程并发跑的话，顺序可能就乱掉了。</li>
</ul>
<p><img src="https://i.loli.net/2020/04/29/vGMBPbeEmlJF8AX.png" alt="kafka-order-01.png"></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><p>拆分多个 queue，每个 queue 一个 consumer，就是多一些 queue 而已，确实是麻烦点；或者就一个 queue 但是对应一个 consumer，然后这个 consumer 内部用内存队列做排队，然后分发给底层不同的 worker 来处理。<br><img src="https://i.loli.net/2020/04/29/QZmI3DhewcgWqRP.png" alt="rabbitmq-order-02.png"></p>
<h4 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h4><ul>
<li>一个 topic，一个 partition，一个 consumer，内部单线程消费，单线程吞吐量太低，一般不会用这个。</li>
<li>写 N 个内存 queue，具有相同 key 的数据都到同一个内存 queue；然后对于 N 个线程，每个线程分别消费一个内存 queue 即可，这样就能保证顺序性。</li>
</ul>
<p><img src="https://i.loli.net/2020/04/29/CyVBjEerh8T6RWG.png" alt="kafka-order-02.png"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何保证消息的可靠性传输？]]></title>
      <url>http://shenshanlaoyuan.com/2020/05/02/%E9%9D%A2%E8%AF%95/2020-5-2-%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E4%BC%A0%E8%BE%93%EF%BC%9F/</url>
      <content type="html"><![CDATA[<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>如何保证消息的可靠性传输？或者说，如何处理消息丢失的问题？</p>
<h2 id="面试官心理分析"><a href="#面试官心理分析" class="headerlink" title="面试官心理分析"></a>面试官心理分析</h2><p>这个是肯定的，用 MQ 有个基本原则，就是<strong>数据不能多一条，也不能少一条</strong>，不能多，就是前面说的<a href="/docs/high-concurrency/how-to-ensure-that-messages-are-not-repeatedly-consumed.md">重复消费和幂等性问题</a>。不能少，就是说这数据别搞丢了。那这个问题你必须得考虑一下。</p>
<p>如果说你这个是用 MQ 来传递非常核心的消息，比如说计费、扣费的一些消息，那必须确保这个 MQ 传递过程中<strong>绝对不会把计费消息给弄丢</strong>。</p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2020/05/02/面试/2020-5-2-如何保证消息的可靠性传输？/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2020/05/02/面试/2020-5-2-如何保证消息的可靠性传输？/'>如何保证消息的可靠性传输？</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<h2 id="面试题剖析"><a href="#面试题剖析" class="headerlink" title="面试题剖析"></a>面试题剖析</h2><p>数据的丢失问题，可能出现在生产者、MQ、消费者中，咱们从 RabbitMQ 和 Kafka 分别来分析一下吧。</p>
<h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><p><img src="https://i.loli.net/2020/04/29/TDqAgEfCtRskpGV.png" alt="rabbitmq-message-lose.png"></p>
<h4 id="生产者弄丢了数据"><a href="#生产者弄丢了数据" class="headerlink" title="生产者弄丢了数据"></a>生产者弄丢了数据</h4><p>生产者将数据发送到 RabbitMQ 的时候，可能数据就在半路给搞丢了，因为网络问题啥的，都有可能。</p>
<p>此时可以选择用 RabbitMQ 提供的事务功能，就是生产者<strong>发送数据之前</strong>开启 RabbitMQ 事务<code>channel.txSelect</code>，然后发送消息，如果消息没有成功被 RabbitMQ 接收到，那么生产者会收到异常报错，此时就可以回滚事务<code>channel.txRollback</code>，然后重试发送消息；如果收到了消息，那么可以提交事务<code>channel.txCommit</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 开启事务</span></div><div class="line">channel.txSelect</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// 这里发送消息</span></div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    channel.txRollback</div><div class="line"></div><div class="line">    <span class="comment">// 这里再次重发这条消息</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 提交事务</span></div><div class="line">channel.txCommit</div></pre></td></tr></table></figure></p>
<p>但是问题是，RabbitMQ 事务机制（同步）一搞，基本上<strong>吞吐量会下来，因为太耗性能</strong>。</p>
<p>所以一般来说，如果你要确保说写 RabbitMQ 的消息别丢，可以开启 <code>confirm</code> 模式，在生产者那里设置开启 <code>confirm</code> 模式之后，你每次写的消息都会分配一个唯一的 id，然后如果写入了 RabbitMQ 中，RabbitMQ 会给你回传一个 <code>ack</code> 消息，告诉你说这个消息 ok 了。如果 RabbitMQ 没能处理这个消息，会回调你的一个 <code>nack</code> 接口，告诉你这个消息接收失败，你可以重试。而且你可以结合这个机制自己在内存里维护每个消息 id 的状态，如果超过一定时间还没接收到这个消息的回调，那么你可以重发。</p>
<p>事务机制和 <code>confirm</code> 机制最大的不同在于，<strong>事务机制是同步的</strong>，你提交一个事务之后会<strong>阻塞</strong>在那儿，但是 <code>confirm</code> 机制是<strong>异步</strong>的，你发送个消息之后就可以发送下一个消息，然后那个消息 RabbitMQ 接收了之后会异步回调你的一个接口通知你这个消息接收到了。</p>
<p>所以一般在生产者这块<strong>避免数据丢失</strong>，都是用 <code>confirm</code> 机制的。</p>
<h4 id="RabbitMQ-弄丢了数据"><a href="#RabbitMQ-弄丢了数据" class="headerlink" title="RabbitMQ 弄丢了数据"></a>RabbitMQ 弄丢了数据</h4><p>就是 RabbitMQ 自己弄丢了数据，这个你必须<strong>开启 RabbitMQ 的持久化</strong>，就是消息写入之后会持久化到磁盘，哪怕是 RabbitMQ 自己挂了，<strong>恢复之后会自动读取之前存储的数据</strong>，一般数据不会丢。除非极其罕见的是，RabbitMQ 还没持久化，自己就挂了，<strong>可能导致少量数据丢失</strong>，但是这个概率较小。</p>
<p>设置持久化有<strong>两个步骤</strong>：</p>
<ul>
<li>创建 queue 的时候将其设置为持久化<br><br>这样就可以保证 RabbitMQ 持久化 queue 的元数据，但是它是不会持久化 queue 里的数据的。</li>
<li>第二个是发送消息的时候将消息的 <code>deliveryMode</code> 设置为 2<br><br>就是将消息设置为持久化的，此时 RabbitMQ 就会将消息持久化到磁盘上去。</li>
</ul>
<p>必须要同时设置这两个持久化才行，RabbitMQ 哪怕是挂了，再次重启，也会从磁盘上重启恢复 queue，恢复这个 queue 里的数据。</p>
<p>注意，哪怕是你给 RabbitMQ 开启了持久化机制，也有一种可能，就是这个消息写到了 RabbitMQ 中，但是还没来得及持久化到磁盘上，结果不巧，此时 RabbitMQ 挂了，就会导致内存里的一点点数据丢失。</p>
<p>所以，持久化可以跟生产者那边的 <code>confirm</code> 机制配合起来，只有消息被持久化到磁盘之后，才会通知生产者 <code>ack</code> 了，所以哪怕是在持久化到磁盘之前，RabbitMQ 挂了，数据丢了，生产者收不到 <code>ack</code>，你也是可以自己重发的。</p>
<h4 id="消费端弄丢了数据"><a href="#消费端弄丢了数据" class="headerlink" title="消费端弄丢了数据"></a>消费端弄丢了数据</h4><p>RabbitMQ 如果丢失了数据，主要是因为你消费的时候，<strong>刚消费到，还没处理，结果进程挂了</strong>，比如重启了，那么就尴尬了，RabbitMQ 认为你都消费了，这数据就丢了。</p>
<p>这个时候得用 RabbitMQ 提供的 <code>ack</code> 机制，简单来说，就是你必须关闭 RabbitMQ 的自动 <code>ack</code>，可以通过一个 api 来调用就行，然后每次你自己代码里确保处理完的时候，再在程序里 <code>ack</code> 一把。这样的话，如果你还没处理完，不就没有 <code>ack</code> 了？那 RabbitMQ 就认为你还没处理完，这个时候 RabbitMQ 会把这个消费分配给别的 consumer 去处理，消息是不会丢的。</p>
<p><img src="https://i.loli.net/2020/04/29/v58Tau3UpytYIXV.png" alt="rabbitmq-message-lose-solution.png"></p>
<h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><h4 id="消费端弄丢了数据-1"><a href="#消费端弄丢了数据-1" class="headerlink" title="消费端弄丢了数据"></a>消费端弄丢了数据</h4><p>唯一可能导致消费者弄丢数据的情况，就是说，你消费到了这个消息，然后消费者那边<strong>自动提交了 offset</strong>，让 Kafka 以为你已经消费好了这个消息，但其实你才刚准备处理这个消息，你还没处理，你自己就挂了，此时这条消息就丢咯。</p>
<p>这不是跟 RabbitMQ 差不多吗，大家都知道 Kafka 会自动提交 offset，那么只要<strong>关闭自动提交</strong> offset，在处理完之后自己手动提交 offset，就可以保证数据不会丢。但是此时确实还是<strong>可能会有重复消费</strong>，比如你刚处理完，还没提交 offset，结果自己挂了，此时肯定会重复消费一次，自己保证幂等性就好了。</p>
<p>生产环境碰到的一个问题，就是说我们的 Kafka 消费者消费到了数据之后是写到一个内存的 queue 里先缓冲一下，结果有的时候，你刚把消息写入内存 queue，然后消费者会自动提交 offset。然后此时我们重启了系统，就会导致内存 queue 里还没来得及处理的数据就丢失了。</p>
<h4 id="Kafka-弄丢了数据"><a href="#Kafka-弄丢了数据" class="headerlink" title="Kafka 弄丢了数据"></a>Kafka 弄丢了数据</h4><p>这块比较常见的一个场景，就是 Kafka 某个 broker 宕机，然后重新选举 partition 的 leader。大家想想，要是此时其他的 follower 刚好还有些数据没有同步，结果此时 leader 挂了，然后选举某个 follower 成 leader 之后，不就少了一些数据？这就丢了一些数据啊。</p>
<p>生产环境也遇到过，我们也是，之前 Kafka 的 leader 机器宕机了，将 follower 切换为 leader 之后，就会发现说这个数据就丢了。</p>
<p>所以此时一般是要求起码设置如下 4 个参数：</p>
<ul>
<li>给 topic 设置 <code>replication.factor</code> 参数：这个值必须大于 1，要求每个 partition 必须有至少 2 个副本。</li>
<li>在 Kafka 服务端设置 <code>min.insync.replicas</code> 参数：这个值必须大于 1，这个是要求一个 leader 至少感知到有至少一个 follower 还跟自己保持联系，没掉队，这样才能确保 leader 挂了还有一个 follower 吧。</li>
<li>在 producer 端设置 <code>acks=all</code>：这个是要求每条数据，必须是<strong>写入所有 replica 之后，才能认为是写成功了</strong>。</li>
<li>在 producer 端设置 <code>retries=MAX</code>（很大很大很大的一个值，无限次重试的意思）：这个是<strong>要求一旦写入失败，就无限重试</strong>，卡在这里了。</li>
</ul>
<p>我们生产环境就是按照上述要求配置的，这样配置之后，至少在 Kafka broker 端就可以保证在 leader 所在 broker 发生故障，进行 leader 切换时，数据不会丢失。</p>
<h4 id="生产者会不会弄丢数据？"><a href="#生产者会不会弄丢数据？" class="headerlink" title="生产者会不会弄丢数据？"></a>生产者会不会弄丢数据？</h4><p>如果按照上述的思路设置了 <code>acks=all</code>，一定不会丢，要求是，你的 leader 接收到消息，所有的 follower 都同步到了消息之后，才认为本次写成功了。如果没满足这个条件，生产者会自动不断的重试，重试无限次。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何保证消息不被重复消费？]]></title>
      <url>http://shenshanlaoyuan.com/2020/05/01/%E9%9D%A2%E8%AF%95/2020-5-1-%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E4%B8%8D%E8%A2%AB%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%EF%BC%9F/</url>
      <content type="html"><![CDATA[<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>如何保证消息不被重复消费？或者说，如何保证消息消费的幂等性？</p>
<h2 id="面试官心理分析"><a href="#面试官心理分析" class="headerlink" title="面试官心理分析"></a>面试官心理分析</h2><p>其实这是很常见的一个问题，这俩问题基本可以连起来问。既然是消费消息，那肯定要考虑会不会重复消费？能不能避免重复消费？或者重复消费了也别造成系统异常可以吗？这个是 MQ 领域的基本问题，其实本质上还是问你<strong>使用消息队列如何保证幂等性</strong>，这个是你架构里要考虑的一个问题。</p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2020/05/01/面试/2020-5-1-如何保证消息不被重复消费？/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2020/05/01/面试/2020-5-1-如何保证消息不被重复消费？/'>如何保证消息不被重复消费？</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>
 
<h2 id="面试题剖析"><a href="#面试题剖析" class="headerlink" title="面试题剖析"></a>面试题剖析</h2><p>回答这个问题，首先你别听到重复消息这个事儿，就一无所知吧，你<strong>先大概说一说可能会有哪些重复消费的问题</strong>。</p>
<p>首先，比如 RabbitMQ、RocketMQ、Kafka，都有可能会出现消息重复消费的问题，正常。因为这问题通常不是 MQ 自己保证的，是由我们开发来保证的。挑一个 Kafka 来举个例子，说说怎么重复消费吧。</p>
<p>Kafka 实际上有个 offset 的概念，就是每个消息写进去，都有一个 offset，代表消息的序号，然后 consumer 消费了数据之后，<strong>每隔一段时间</strong>（定时定期），会把自己消费过的消息的 offset 提交一下，表示“我已经消费过了，下次我要是重启啥的，你就让我继续从上次消费到的 offset 来继续消费吧”。</p>
<p>但是凡事总有意外，比如我们之前生产经常遇到的，就是你有时候重启系统，看你怎么重启了，如果碰到点着急的，直接 kill 进程了，再重启。这会导致 consumer 有些消息处理了，但是没来得及提交 offset，尴尬了。重启之后，少数消息会再次消费一次。</p>
<p>举个栗子。</p>
<p>有这么个场景。数据 1/2/3 依次进入 kafka，kafka 会给这三条数据每条分配一个 offset，代表这条数据的序号，我们就假设分配的 offset 依次是 152/153/154。消费者从 kafka 去消费的时候，也是按照这个顺序去消费。假如当消费者消费了 <code>offset=153</code> 的这条数据，刚准备去提交 offset 到 zookeeper，此时消费者进程被重启了。那么此时消费过的数据 1/2 的 offset 并没有提交，kafka 也就不知道你已经消费了 <code>offset=153</code> 这条数据。那么重启之后，消费者会找 kafka 说，嘿，哥儿们，你给我接着把上次我消费到的那个地方后面的数据继续给我传递过来。由于之前的 offset 没有提交成功，那么数据 1/2 会再次传过来，如果此时消费者没有去重的话，那么就会导致重复消费。</p>
<p><img src="https://i.loli.net/2020/04/29/iDP3fFa4jMNOSVv.png" alt="mq-10.png"></p>
<p>如果消费者干的事儿是拿一条数据就往数据库里写一条，会导致说，你可能就把数据 1/2 在数据库里插入了 2 次，那么数据就错啦。</p>
<p>其实重复消费不可怕，可怕的是你没考虑到重复消费之后，<strong>怎么保证幂等性</strong>。</p>
<p>举个例子吧。假设你有个系统，消费一条消息就往数据库里插入一条数据，要是你一个消息重复两次，你不就插入了两条，这数据不就错了？但是你要是消费到第二次的时候，自己判断一下是否已经消费过了，若是就直接扔了，这样不就保留了一条数据，从而保证了数据的正确性。</p>
<p>一条数据重复出现两次，数据库里就只有一条数据，这就保证了系统的幂等性。</p>
<p>幂等性，通俗点说，就一个数据，或者一个请求，给你重复来多次，你得确保对应的数据是不会改变的，<strong>不能出错</strong>。</p>
<p>所以第二个问题来了，怎么保证消息队列消费的幂等性？</p>
<p>其实还是得结合业务来思考，我这里给几个思路：</p>
<ul>
<li>比如你拿个数据要写库，你先根据主键查一下，如果这数据都有了，你就别插入了，update 一下好吧。</li>
<li>比如你是写 Redis，那没问题了，反正每次都是 set，天然幂等性。</li>
<li>比如你不是上面两个场景，那做的稍微复杂一点，你需要让生产者发送每条数据的时候，里面加一个全局唯一的 id，类似订单 id 之类的东西，然后你这里消费到了之后，先根据这个 id 去比如 Redis 里查一下，之前消费过吗？如果没有消费过，你就处理，然后这个 id 写 Redis。如果消费过了，那你就别处理了，保证别重复处理相同的消息即可。</li>
<li>比如基于数据库的唯一键来保证重复数据不会重复插入多条。因为有唯一键约束了，重复数据插入只会报错，不会导致数据库中出现脏数据。</li>
</ul>
<p><img src="https://i.loli.net/2020/04/29/VPBAgM9I3NWm52O.png" alt="mq-11.png"></p>
<p>当然，如何保证 MQ 的消费是幂等性的，需要结合具体的业务来看。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何保证消息队列的高可用？]]></title>
      <url>http://shenshanlaoyuan.com/2020/04/30/%E9%9D%A2%E8%AF%95/2020-4-30-%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E9%AB%98%E5%8F%AF%E7%94%A8%EF%BC%9F/</url>
      <content type="html"><![CDATA[<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>如何保证消息队列的高可用？</p>
<h2 id="面试官心理分析"><a href="#面试官心理分析" class="headerlink" title="面试官心理分析"></a>面试官心理分析</h2><p>如果有人问到你 MQ 的知识，<strong>高可用是必问的</strong>。<a href="/docs/high-concurrency/why-mq.md">上一讲</a>提到，MQ 会导致<strong>系统可用性降低</strong>。所以只要你用了 MQ，接下来问的一些要点肯定就是围绕着 MQ 的那些缺点怎么来解决了。</p>
<p>要是你傻乎乎的就干用了一个 MQ，各种问题从来没考虑过，那你就杯具了，面试官对你的感觉就是，只会简单使用一些技术，没任何思考，马上对你的印象就不太好了。这样的同学招进来要是做个 20k 薪资以内的普通小弟还凑合，要是做薪资 20k+ 的高工，那就惨了，让你设计个系统，里面肯定一堆坑，出了事故公司受损失，团队一起背锅。</p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2020/04/30/面试/2020-4-30-如何保证消息队列的高可用？/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2020/04/30/面试/2020-4-30-如何保证消息队列的高可用？/'>如何保证消息队列的高可用？</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>
 
<h2 id="面试题剖析"><a href="#面试题剖析" class="headerlink" title="面试题剖析"></a>面试题剖析</h2><p>这个问题这么问是很好的，因为不能问你 Kafka 的高可用性怎么保证？ActiveMQ 的高可用性怎么保证？一个面试官要是这么问就显得很没水平，人家可能用的就是 RabbitMQ，没用过 Kafka，你上来问人家 Kafka 干什么？这不是摆明了刁难人么。</p>
<p>所以有水平的面试官，问的是 MQ 的高可用性怎么保证？这样就是你用过哪个 MQ，你就说说你对那个 MQ 的高可用性的理解。</p>
<h3 id="RabbitMQ-的高可用性"><a href="#RabbitMQ-的高可用性" class="headerlink" title="RabbitMQ 的高可用性"></a>RabbitMQ 的高可用性</h3><p>RabbitMQ 是比较有代表性的，因为是<strong>基于主从</strong>（非分布式）做高可用性的，我们就以 RabbitMQ 为例子讲解第一种 MQ 的高可用性怎么实现。</p>
<p>RabbitMQ 有三种模式：单机模式、普通集群模式、镜像集群模式。</p>
<h4 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h4><p>单机模式，就是 Demo 级别的，一般就是你本地启动了玩玩儿的😄，没人生产用单机模式。</p>
<h4 id="普通集群模式（无高可用性）"><a href="#普通集群模式（无高可用性）" class="headerlink" title="普通集群模式（无高可用性）"></a>普通集群模式（无高可用性）</h4><p>普通集群模式，意思就是在多台机器上启动多个 RabbitMQ 实例，每个机器启动一个。你<strong>创建的 queue，只会放在一个 RabbitMQ 实例上</strong>，但是每个实例都同步 queue 的元数据（元数据可以认为是 queue 的一些配置信息，通过元数据，可以找到 queue 所在实例）。你消费的时候，实际上如果连接到了另外一个实例，那么那个实例会从 queue 所在实例上拉取数据过来。</p>
<p><img src="https://i.loli.net/2020/04/29/bzt2Bgy1OJQfxW8.png" alt="mq-7.png"></p>
<p>这种方式确实很麻烦，也不怎么好，<strong>没做到所谓的分布式</strong>，就是个普通集群。因为这导致你要么消费者每次随机连接一个实例然后拉取数据，要么固定连接那个 queue 所在实例消费数据，前者有<strong>数据拉取的开销</strong>，后者导致<strong>单实例性能瓶颈</strong>。</p>
<p>而且如果那个放 queue 的实例宕机了，会导致接下来其他实例就无法从那个实例拉取，如果你<strong>开启了消息持久化</strong>，让 RabbitMQ 落地存储消息的话，<strong>消息不一定会丢</strong>，得等这个实例恢复了，然后才可以继续从这个 queue 拉取数据。</p>
<p>所以这个事儿就比较尴尬了，这就<strong>没有什么所谓的高可用性</strong>，<strong>这方案主要是提高吞吐量的</strong>，就是说让集群中多个节点来服务某个 queue 的读写操作。</p>
<h4 id="镜像集群模式（高可用性）"><a href="#镜像集群模式（高可用性）" class="headerlink" title="镜像集群模式（高可用性）"></a>镜像集群模式（高可用性）</h4><p>这种模式，才是所谓的 RabbitMQ 的高可用模式。跟普通集群模式不一样的是，在镜像集群模式下，你创建的 queue，无论元数据还是 queue 里的消息都会<strong>存在于多个实例上</strong>，就是说，每个 RabbitMQ 节点都有这个 queue 的一个<strong>完整镜像</strong>，包含 queue 的全部数据的意思。然后每次你写消息到 queue 的时候，都会自动把<strong>消息同步</strong>到多个实例的 queue 上。</p>
<p><img src="https://i.loli.net/2020/04/29/dfqoF17r5nPWle9.png" alt="mq-8.png"></p>
<p>那么<strong>如何开启这个镜像集群模式</strong>呢？其实很简单，RabbitMQ 有很好的管理控制台，就是在后台新增一个策略，这个策略是<strong>镜像集群模式的策略</strong>，指定的时候是可以要求数据同步到所有节点的，也可以要求同步到指定数量的节点，再次创建 queue 的时候，应用这个策略，就会自动将数据同步到其他的节点上去了。</p>
<p>这样的话，好处在于，你任何一个机器宕机了，没事儿，其它机器（节点）还包含了这个 queue 的完整数据，别的 consumer 都可以到其它节点上去消费数据。坏处在于，第一，这个性能开销也太大了吧，消息需要同步到所有机器上，导致网络带宽压力和消耗很重！第二，这么玩儿，不是分布式的，就<strong>没有扩展性可言</strong>了，如果某个 queue 负载很重，你加机器，新增的机器也包含了这个 queue 的所有数据，并<strong>没有办法线性扩展</strong>你的 queue。你想，如果这个 queue 的数据量很大，大到这个机器上的容量无法容纳了，此时该怎么办呢？</p>
<h3 id="Kafka-的高可用性"><a href="#Kafka-的高可用性" class="headerlink" title="Kafka 的高可用性"></a>Kafka 的高可用性</h3><p>Kafka 一个最基本的架构认识：由多个 broker 组成，每个 broker 是一个节点；你创建一个 topic，这个 topic 可以划分为多个 partition，每个 partition 可以存在于不同的 broker 上，每个 partition 就放一部分数据。</p>
<p>这就是<strong>天然的分布式消息队列</strong>，就是说一个 topic 的数据，是<strong>分散放在多个机器上的，每个机器就放一部分数据</strong>。</p>
<p>实际上 RabbitMQ 之类的，并不是分布式消息队列，它就是传统的消息队列，只不过提供了一些集群、HA(High Availability, 高可用性) 的机制而已，因为无论怎么玩儿，RabbitMQ 一个 queue 的数据都是放在一个节点里的，镜像集群下，也是每个节点都放这个 queue 的完整数据。</p>
<p>Kafka 0.8 以前，是没有 HA 机制的，就是任何一个 broker 宕机了，那个 broker 上的 partition 就废了，没法写也没法读，没有什么高可用性可言。</p>
<p>比如说，我们假设创建了一个 topic，指定其 partition 数量是 3 个，分别在三台机器上。但是，如果第二台机器宕机了，会导致这个 topic 的 1/3 的数据就丢了，因此这个是做不到高可用的。</p>
<p><img src="https://i.loli.net/2020/04/29/I7RbKUCLoPaDf84.png" alt="kafka-before.png"></p>
<p>Kafka 0.8 以后，提供了 HA 机制，就是 replica（复制品） 副本机制。每个 partition 的数据都会同步到其它机器上，形成自己的多个 replica 副本。所有 replica 会选举一个 leader 出来，那么生产和消费都跟这个 leader 打交道，然后其他 replica 就是 follower。写的时候，leader 会负责把数据同步到所有 follower 上去，读的时候就直接读 leader 上的数据即可。只能读写 leader？很简单，<strong>要是你可以随意读写每个 follower，那么就要 care 数据一致性的问题</strong>，系统复杂度太高，很容易出问题。Kafka 会均匀地将一个 partition 的所有 replica 分布在不同的机器上，这样才可以提高容错性。</p>
<p><img src="https://i.loli.net/2020/04/29/D36HiSJEpqxCIF5.png" alt="kafka-after.png"></p>
<p>这么搞，就有所谓的<strong>高可用性</strong>了，因为如果某个 broker 宕机了，没事儿，那个 broker上面的 partition 在其他机器上都有副本的。如果这个宕机的 broker 上面有某个 partition 的 leader，那么此时会从 follower 中<strong>重新选举</strong>一个新的 leader 出来，大家继续读写那个新的 leader 即可。这就有所谓的高可用性了。</p>
<p><strong>写数据</strong>的时候，生产者就写 leader，然后 leader 将数据落地写本地磁盘，接着其他 follower 自己主动从 leader 来 pull 数据。一旦所有 follower 同步好数据了，就会发送 ack 给 leader，leader 收到所有 follower 的 ack 之后，就会返回写成功的消息给生产者。（当然，这只是其中一种模式，还可以适当调整这个行为）</p>
<p><strong>消费</strong>的时候，只会从 leader 去读，但是只有当一个消息已经被所有 follower 都同步成功返回 ack 的时候，这个消息才会被消费者读到。</p>
<p>看到这里，相信你大致明白了 Kafka 是如何保证高可用机制的了，对吧？不至于一无所知，现场还能给面试官画画图。要是遇上面试官确实是 Kafka 高手，深挖了问，那你只能说不好意思，太深入的你没研究过。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[为什么使用消息队列？]]></title>
      <url>http://shenshanlaoyuan.com/2020/04/29/%E9%9D%A2%E8%AF%95/2020-4-29-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%EF%BC%9F/</url>
      <content type="html"><![CDATA[<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><ul>
<li>为什么使用消息队列？</li>
<li>消息队列有什么优点和缺点？</li>
<li>Kafka、ActiveMQ、RabbitMQ、RocketMQ 都有什么区别，以及适合哪些场景？</li>
</ul>
<h2 id="面试官心理分析"><a href="#面试官心理分析" class="headerlink" title="面试官心理分析"></a>面试官心理分析</h2><p>其实面试官主要是想看看：</p>
<ul>
<li><strong>第一</strong>，你知不知道你们系统里为什么要用消息队列这个东西？</li>
</ul>
<p>不少候选人，说自己项目里用了 Redis、MQ，但是其实他并不知道自己为什么要用这个东西。其实说白了，就是为了用而用，或者是别人设计的架构，他从头到尾都没思考过。</p>
<p>没有对自己的架构问过为什么的人，一定是平时没有思考的人，面试官对这类候选人印象通常很不好。因为面试官担心你进了团队之后只会木头木脑的干呆活儿，不会自己思考。</p>
<ul>
<li><strong>第二</strong>，你既然用了消息队列这个东西，你知不知道用了有什么好处&amp;坏处？</li>
</ul>
<p>你要是没考虑过这个，那你盲目弄个 MQ 进系统里，后面出了问题你是不是就自己溜了给公司留坑？你要是没考虑过引入一个技术可能存在的弊端和风险，面试官把这类候选人招进来了，基本可能就是挖坑型选手。就怕你干 1 年挖一堆坑，自己跳槽了，给公司留下无穷后患。</p>
<ul>
<li><strong>第三</strong>，既然你用了 MQ，可能是某一种 MQ，那么你当时做没做过调研？</li>
</ul>
<p>你别傻乎乎的自己拍脑袋看个人喜好就瞎用了一个 MQ，比如 Kafka，甚至都从没调研过业界流行的 MQ 到底有哪几种。每一个 MQ 的优点和缺点是什么。每一个 MQ <strong>没有绝对的好坏</strong>，但是就是看用在哪个场景可以<strong>扬长避短，利用其优势，规避其劣势</strong>。</p>
<p>如果是一个不考虑技术选型的候选人招进了团队，leader 交给他一个任务，去设计个什么系统，他在里面用一些技术，可能都没考虑过选型，最后选的技术可能并不一定合适，一样是留坑。</p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2020/04/29/面试/2020-4-29-为什么使用消息队列？/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2020/04/29/面试/2020-4-29-为什么使用消息队列？/'>为什么使用消息队列？</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<h2 id="面试题剖析"><a href="#面试题剖析" class="headerlink" title="面试题剖析"></a>面试题剖析</h2><h3 id="为什么使用消息队列"><a href="#为什么使用消息队列" class="headerlink" title="为什么使用消息队列"></a>为什么使用消息队列</h3><p>其实就是问问你消息队列都有哪些使用场景，然后你项目里具体是什么场景，说说你在这个场景里用消息队列是什么？</p>
<p>面试官问你这个问题，<strong>期望的一个回答</strong>是说，你们公司有个什么<strong>业务场景</strong>，这个业务场景有个什么技术挑战，如果不用 MQ 可能会很麻烦，但是你现在用了 MQ 之后带给了你很多的好处。</p>
<p>先说一下消息队列常见的使用场景吧，其实场景有很多，但是比较核心的有 3 个：<strong>解耦</strong>、<strong>异步</strong>、<strong>削峰</strong>。</p>
<h4 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h4><p>看这么个场景。A 系统发送数据到 BCD 三个系统，通过接口调用发送。如果 E 系统也要这个数据呢？那如果 C 系统现在不需要了呢？A 系统负责人几乎崩溃……</p>
<p><img src="https://i.loli.net/2020/04/29/W18fTLxVDkwgrFp.png" alt="mq-1.png"></p>
<p>在这个场景中，A 系统跟其它各种乱七八糟的系统严重耦合，A 系统产生一条比较关键的数据，很多系统都需要 A 系统将这个数据发送过来。A 系统要时时刻刻考虑 BCDE 四个系统如果挂了该咋办？要不要重发，要不要把消息存起来？头发都白了啊！</p>
<p>如果使用 MQ，A 系统产生一条数据，发送到 MQ 里面去，哪个系统需要数据自己去 MQ 里面消费。如果新系统需要数据，直接从 MQ 里消费即可；如果某个系统不需要这条数据了，就取消对 MQ 消息的消费即可。这样下来，A 系统压根儿不需要去考虑要给谁发送数据，不需要维护这个代码，也不需要考虑人家是否调用成功、失败超时等情况。</p>
<p><img src="https://i.loli.net/2020/04/29/dPD5ROkJF8mW6vf.png" alt="mq-2.png"></p>
<p><strong>总结</strong>：通过一个 MQ，Pub/Sub 发布订阅消息这么一个模型，A 系统就跟其它系统彻底解耦了。</p>
<p><strong>面试技巧</strong>：你需要去考虑一下你负责的系统中是否有类似的场景，就是一个系统或者一个模块，调用了多个系统或者模块，互相之间的调用很复杂，维护起来很麻烦。但是其实这个调用是不需要直接同步调用接口的，如果用 MQ 给它异步化解耦，也是可以的，你就需要去考虑在你的项目里，是不是可以运用这个 MQ 去进行系统的解耦。在简历中体现出来这块东西，用 MQ 作解耦。</p>
<h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>再来看一个场景，A 系统接收一个请求，需要在自己本地写库，还需要在 BCD 三个系统写库，自己本地写库要 3ms，BCD 三个系统分别写库要 300ms、450ms、200ms。最终请求总延时是 3 + 300 + 450 + 200 = 953ms，接近 1s，用户感觉搞个什么东西，慢死了慢死了。用户通过浏览器发起请求，等待个 1s，这几乎是不可接受的。</p>
<p><img src="https://i.loli.net/2020/04/29/qMkf8DshPvQH1Ar.png" alt="mq-3.png"></p>
<p>一般互联网类的企业，对于用户直接的操作，一般要求是每个请求都必须在 200 ms 以内完成，对用户几乎是无感知的。</p>
<p>如果<strong>使用 MQ</strong>，那么 A 系统连续发送 3 条消息到 MQ 队列中，假如耗时 5ms，A 系统从接受一个请求到返回响应给用户，总时长是 3 + 5 = 8ms，对于用户而言，其实感觉上就是点个按钮，8ms 以后就直接返回了，爽！网站做得真好，真快！</p>
<p><img src="https://i.loli.net/2020/04/29/eLV5IEqmkiNv7fK.png" alt="mq-4.png"></p>
<h4 id="削峰"><a href="#削峰" class="headerlink" title="削峰"></a>削峰</h4><p>每天 0:00 到 12:00，A 系统风平浪静，每秒并发请求数量就 50 个。结果每次一到 12:00 ~ 13:00 ，每秒并发请求数量突然会暴增到 5k+ 条。但是系统是直接基于 MySQL 的，大量的请求涌入 MySQL，每秒钟对 MySQL 执行约 5k 条 SQL。</p>
<p>一般的 MySQL，扛到每秒 2k 个请求就差不多了，如果每秒请求到 5k 的话，可能就直接把 MySQL 给打死了，导致系统崩溃，用户也就没法再使用系统了。</p>
<p>但是高峰期一过，到了下午的时候，就成了低峰期，可能也就 1w 的用户同时在网站上操作，每秒中的请求数量可能也就 50 个请求，对整个系统几乎没有任何的压力。</p>
<p><img src="https://i.loli.net/2020/04/29/oBrGk1bnc7Sp5mN.png" alt="mq-5.png"></p>
<p>如果使用 MQ，每秒 5k 个请求写入 MQ，A 系统每秒钟最多处理 2k 个请求，因为 MySQL 每秒钟最多处理 2k 个。A 系统从 MQ 中慢慢拉取请求，每秒钟就拉取 2k 个请求，不要超过自己每秒能处理的最大请求数量就 ok，这样下来，哪怕是高峰期的时候，A 系统也绝对不会挂掉。而 MQ 每秒钟 5k 个请求进来，就 2k 个请求出去，结果就导致在中午高峰期（1 个小时），可能有几十万甚至几百万的请求积压在 MQ 中。</p>
<p><img src="https://i.loli.net/2020/04/29/TGJFC5QgauDPsqd.png" alt="mq-6.png"></p>
<p>这个短暂的高峰期积压是 ok 的，因为高峰期过了之后，每秒钟就 50 个请求进 MQ，但是 A 系统依然会按照每秒 2k 个请求的速度在处理。所以说，只要高峰期一过，A 系统就会快速将积压的消息给解决掉。</p>
<h3 id="消息队列有什么优缺点"><a href="#消息队列有什么优缺点" class="headerlink" title="消息队列有什么优缺点"></a>消息队列有什么优缺点</h3><p>优点上面已经说了，就是<strong>在特殊场景下有其对应的好处</strong>，<strong>解耦</strong>、<strong>异步</strong>、<strong>削峰</strong>。</p>
<p>缺点有以下几个：</p>
<ul>
<li>系统可用性降低</li>
</ul>
<p>系统引入的外部依赖越多，越容易挂掉。本来你就是 A 系统调用 BCD 三个系统的接口就好了，ABCD 四个系统还好好的，没啥问题，你偏加个 MQ 进来，万一 MQ 挂了咋整？MQ 一挂，整套系统崩溃，你不就完了？如何保证消息队列的高可用，可以<a href="/docs/high-concurrency/how-to-ensure-high-availability-of-message-queues.md">点击这里查看</a>。</p>
<ul>
<li>系统复杂度提高</li>
</ul>
<p>硬生生加个 MQ 进来，你怎么<a href="/docs/high-concurrency/how-to-ensure-that-messages-are-not-repeatedly-consumed.md">保证消息没有重复消费</a>？怎么<a href="/docs/high-concurrency/how-to-ensure-the-reliable-transmission-of-messages.md">处理消息丢失的情况</a>？怎么保证消息传递的顺序性？头大头大，问题一大堆，痛苦不已。</p>
<ul>
<li>一致性问题</li>
</ul>
<p>A 系统处理完了直接返回成功了，人都以为你这个请求就成功了；但是问题是，要是 BCD 三个系统那里，BD 两个系统写库成功了，结果 C 系统写库失败了，咋整？你这数据就不一致了。</p>
<p>所以消息队列实际是一种非常复杂的架构，你引入它有很多好处，但是也得针对它带来的坏处做各种额外的技术方案和架构来规避掉，做好之后，你会发现，妈呀，系统复杂度提升了一个数量级，也许是复杂了 10 倍。但是关键时刻，用，还是得用的。</p>
<h3 id="Kafka、ActiveMQ、RabbitMQ、RocketMQ-有什么优缺点？"><a href="#Kafka、ActiveMQ、RabbitMQ、RocketMQ-有什么优缺点？" class="headerlink" title="Kafka、ActiveMQ、RabbitMQ、RocketMQ 有什么优缺点？"></a>Kafka、ActiveMQ、RabbitMQ、RocketMQ 有什么优缺点？</h3><table>
<thead>
<tr>
<th>特性</th>
<th>ActiveMQ</th>
<th>RabbitMQ</th>
<th>RocketMQ</th>
<th>Kafka</th>
</tr>
</thead>
<tbody>
<tr>
<td>单机吞吐量</td>
<td>万级，比 RocketMQ、Kafka 低一个数量级</td>
<td>同 ActiveMQ</td>
<td>10 万级，支撑高吞吐</td>
<td>10 万级，高吞吐，一般配合大数据类的系统来进行实时数据计算、日志采集等场景</td>
</tr>
<tr>
<td>topic 数量对吞吐量的影响</td>
<td></td>
<td></td>
<td>topic 可以达到几百/几千的级别，吞吐量会有较小幅度的下降，这是 RocketMQ 的一大优势，在同等机器下，可以支撑大量的 topic</td>
<td>topic 从几十到几百个时候，吞吐量会大幅度下降，在同等机器下，Kafka 尽量保证 topic 数量不要过多，如果要支撑大规模的 topic，需要增加更多的机器资源</td>
</tr>
<tr>
<td>时效性</td>
<td>ms 级</td>
<td>微秒级，这是 RabbitMQ 的一大特点，延迟最低</td>
<td>ms 级</td>
<td>延迟在 ms 级以内</td>
</tr>
<tr>
<td>可用性</td>
<td>高，基于主从架构实现高可用</td>
<td>同 ActiveMQ</td>
<td>非常高，分布式架构</td>
<td>非常高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td>
</tr>
<tr>
<td>消息可靠性</td>
<td>有较低的概率丢失数据</td>
<td>基本不丢</td>
<td>经过参数优化配置，可以做到 0 丢失</td>
<td>同 RocketMQ</td>
</tr>
<tr>
<td>功能支持</td>
<td>MQ 领域的功能极其完备</td>
<td>基于 erlang 开发，并发能力很强，性能极好，延时很低</td>
<td>MQ 功能较为完善，还是分布式的，扩展性好</td>
<td>功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用</td>
</tr>
</tbody>
</table>
<p>综上，各种对比之后，有如下建议：</p>
<p>一般的业务系统要引入 MQ，最早大家都用 ActiveMQ，但是现在确实大家用的不多了，没经过大规模吞吐量场景的验证，社区也不是很活跃，所以大家还是算了吧，我个人不推荐用这个了；</p>
<p>后来大家开始用 RabbitMQ，但是确实 erlang 语言阻止了大量的 Java 工程师去深入研究和掌控它，对公司而言，几乎处于不可控的状态，但是确实人家是开源的，比较稳定的支持，活跃度也高；</p>
<p>不过现在确实越来越多的公司会去用 RocketMQ，确实很不错，毕竟是阿里出品，但社区可能有突然黄掉的风险（目前 RocketMQ 已捐给 <a href="https://github.com/apache/rocketmq" target="_blank" rel="external">Apache</a>，但 GitHub 上的活跃度其实不算高）对自己公司技术实力有绝对自信的，推荐用 RocketMQ，否则回去老老实实用 RabbitMQ 吧，人家有活跃的开源社区，绝对不会黄。</p>
<p>所以<strong>中小型公司</strong>，技术实力较为一般，技术挑战不是特别高，用 RabbitMQ 是不错的选择；<strong>大型公司</strong>，基础架构研发实力较强，用 RocketMQ 是很好的选择。</p>
<p>如果是<strong>大数据领域</strong>的实时计算、日志采集等场景，用 Kafka 是业内标准的，绝对没问题，社区活跃度很高，绝对不会黄，何况几乎是全世界这个领域的事实性规范。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[面试遇到连环炮该如何接招？]]></title>
      <url>http://shenshanlaoyuan.com/2020/04/28/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%81%87%E5%88%B0%E8%BF%9E%E7%8E%AF%E7%82%AE%E8%AF%A5%E5%A6%82%E4%BD%95%E6%8E%A5%E6%8B%9B%EF%BC%9F/</url>
      <content type="html"><![CDATA[<h2 id="消息队列面试场景"><a href="#消息队列面试场景" class="headerlink" title="消息队列面试场景"></a>消息队列面试场景</h2><p><strong>面试官</strong>：你好。</p>
<p><strong>候选人</strong>：你好。</p>
<p>（面试官在你的简历上面看到了，呦，有个亮点，你在项目里用过 <code>MQ</code>，比如说你用过 <code>ActiveMQ</code>）</p>
<p><strong>面试官</strong>：你在系统里用过消息队列吗？（面试官在随和的语气中展开了面试）</p>
<p><strong>候选人</strong>：用过的（此时感觉没啥）</p>
<p><strong>面试官</strong>：那你说一下你们在项目里是怎么用消息队列的？</p>
<p><strong>候选人</strong>：巴拉巴拉，“我们啥啥系统发送个啥啥消息到队列，别的系统来消费啥啥的。比如我们有个订单系统，订单系统每次下一个新的订单的时候，就会发送一条消息到 <code>ActiveMQ</code> 里面去，后台有个库存系统负责获取消息然后更新库存。”</p>
<p>（部分同学在这里会进入一个误区，就是你仅仅就是知道以及回答你们是怎么用这个消息队列的，用这个消息队列来干了个什么事情？）</p>
<p><strong>面试官</strong>：那你们为什么使用消息队列啊？你的订单系统不发送消息到 <code>MQ</code>，直接订单系统调用库存系统一个接口，咔嚓一下，直接就调用成功，库存不也就更新了。</p>
<p><strong>候选人</strong>：额。。。（楞了一下，为什么？我没怎么仔细想过啊，老大让用就用了），硬着头皮胡言乱语了几句。</p>
<p>（面试官此时听你楞了一下，然后听你胡言乱语了几句，开始心里觉得有点儿那什么了，怀疑你之前就压根儿没思考过这问题）</p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2020/04/28/面试/面试遇到连环炮该如何接招？/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2020/04/28/面试/面试遇到连环炮该如何接招？/'>面试遇到连环炮该如何接招？</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>
 
<p><strong>面试官</strong>：那你说说用消息队列都有什么优点和缺点？</p>
<p>（面试官此时心里想的是，你的 <code>MQ</code> 在项目里为啥要用，你没怎么考虑过，那我稍微简单点儿，我问问你消息队列你之前有没有考虑过如果用的话，优点和缺点分别是啥？）</p>
<p><strong>候选人</strong>：这个。。。（确实平时没怎么考虑过这个问题啊。。。胡言乱语了）</p>
<p>（面试官此时心里已经更觉得你这哥儿们不行，平时都没什么思考）</p>
<p><strong>面试官</strong>：<code>Kafka</code>、<code>ActiveMQ</code>、<code>RabbitMQ</code>、<code>RocketMQ</code> 都有什么区别？</p>
<p>（面试官问你这个问题，就是说，绕过比较虚的话题，直接看看你对各种 <code>MQ</code> 中间件是否了解，是否做过功课，是否做过调研）</p>
<p><strong>候选人</strong>：我们就用过 <code>ActiveMQ</code>，所以别的没用过。。。区别，也不太清楚。。。</p>
<p>（面试官此时更是觉得你这哥儿们平时就是瞎用，根本就没什么思考，觉得不行）</p>
<p><strong>面试官</strong>：那你们是如何保证消息队列的高可用啊？</p>
<p><strong>候选人</strong>：这个。。。我平时就是简单走 API 调用一下，不太清楚消息队列怎么部署的。。。</p>
<p><strong>面试官</strong>：如何保证消息不被重复消费啊？如何保证消费的时候是幂等的啊？</p>
<p><strong>候选人</strong>：啥？（<code>MQ</code> 不就是写入&amp;消费就可以了，哪来这么多问题）</p>
<p><strong>面试官</strong>：如何保证消息的可靠性传输啊？要是消息丢失了怎么办啊？</p>
<p><strong>候选人</strong>：我们没怎么丢过消息啊。。。</p>
<p><strong>面试官</strong>：那如何保证消息的顺序性？</p>
<p><strong>候选人</strong>：顺序性？什么意思？我为什么要保证消息的顺序性？它不是本来就有顺序吗？</p>
<p><strong>面试官</strong>：如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？有几百万消息持续积压几小时，说说怎么解决？</p>
<p><strong>候选人</strong>：不是，我这平时没遇到过这些问题啊，就是简单用用，知道 <code>MQ</code> 的一些功能。</p>
<p><strong>面试官</strong>：如果让你写一个消息队列，该如何进行架构设计啊？说一下你的思路。</p>
<p><strong>候选人</strong>：。。。。。我还是走吧。。。。</p>
<hr>
<p>这其实是面试官的一种面试风格，就是说面试官的问题不是发散的，而是从一个小点慢慢铺开。比如说面试官可能会跟你聊聊高并发话题，就这个话题里面跟你聊聊缓存、<code>MQ</code> 等等东西，<strong>由浅入深，一步步深挖</strong>。</p>
<p>其实上面是一个非常典型的关于消息队列的技术考察过程，好的面试官一定是从你做过的某一个点切入，然后层层展开深入考察，一个接一个问，直到把这个技术点刨根问底，问到最底层。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[慕课网高并发课程笔记（三）-项目准备]]></title>
      <url>http://shenshanlaoyuan.com/2018/05/05/Java/bingfa3/</url>
      <content type="html"><![CDATA[<h2 id="线程安全与线程不安全"><a href="#线程安全与线程不安全" class="headerlink" title="线程安全与线程不安全"></a>线程安全与线程不安全</h2><ul>
<li>线程安全：代码所在的进程有多个线程在同时运行，这些线程可能会同时运行同一段代码，如果每次运行的结果和单线程运行的结果一样的，而且其他的变量的值也和预期是一样的，我们就认为这是线程安全的。简单的说，就是并发环境下得到我们期望的结果。</li>
<li>线程不安全：就是不提供数据访问保护，有可能出现多个线程先后更改数据，所得到的数据是脏数据，也可能是在计算中出现错误。</li>
</ul>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2018/05/05/Java/bingfa3/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2018/05/05/Java/bingfa3/'>慕课网高并发课程笔记（三）-项目准备</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<h2 id="环境搭建与准备"><a href="#环境搭建与准备" class="headerlink" title="环境搭建与准备"></a>环境搭建与准备</h2><h3 id="Spring-Boot构建项目"><a href="#Spring-Boot构建项目" class="headerlink" title="Spring Boot构建项目"></a>Spring Boot构建项目</h3><p><a href="Https://start.spring.io/" target="_blank" rel="external">Https://start.spring.io/</a></p>
<p>具体搭建过程参考视频。</p>
<h3 id="注解的准备"><a href="#注解的准备" class="headerlink" title="注解的准备"></a>注解的准备</h3><ul>
<li><p>线程安全的注解</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 对于线程安全的类，加入一个<span class="doctag">@ThreadSafe</span>注解的标示</div><div class="line"> * <span class="doctag">@Target</span>(ElementType.TYPE) 说明作用于类上</div><div class="line"> * <span class="doctag">@Retention</span>(RetentionPolicy.SOURCE) 指定注解作用的范围，在编译的时候就会被忽略掉</div><div class="line"> * <span class="doctag">@author</span> gaowenfeng</div><div class="line"> */</div><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ThreadSafe &#123;</div><div class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>线程不安全的注解</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 用来标示[线程不安全的类]</div><div class="line"> * <span class="doctag">@Target</span>(ElementType.TYPE) 说明作用于类上</div><div class="line"> * <span class="doctag">@Retention</span>(RetentionPolicy.SOURCE) 指定注解作用的范围，在编译的时候就会被忽略掉</div><div class="line"> * <span class="doctag">@author</span> gaowenfeng</div><div class="line"> */</div><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NotThreadSafe &#123;</div><div class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>推荐写法的注解</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 用来标记[推荐]的类或者写法</div><div class="line"> */</div><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Recommend &#123;</div><div class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>不推荐写法的注解</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 用来标记[不推荐]的类或者写法</div><div class="line"> */</div><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NotRecommend &#123;</div><div class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="ElementType-详解"><a href="#ElementType-详解" class="headerlink" title="ElementType 详解"></a>ElementType 详解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ElementType &#123;</div><div class="line">    <span class="comment">/** Class, interface (including annotation type), or enum declaration */</span></div><div class="line">   <span class="comment">/** 声明注解作用在类，借口，枚举上*/</span></div><div class="line">    TYPE,</div><div class="line"></div><div class="line">    <span class="comment">/** Field declaration (includes enum constants) */</span></div><div class="line">   <span class="comment">/** 声明注解作用在属性上*/</span></div><div class="line">    FIELD,</div><div class="line"></div><div class="line">    <span class="comment">/** Method declaration */</span></div><div class="line">   <span class="comment">/** 声明注解作用在方法上*/</span></div><div class="line">    METHOD,</div><div class="line"></div><div class="line">    <span class="comment">/** Formal parameter declaration */</span></div><div class="line">   <span class="comment">/** 声明注解作用在参数上*/</span></div><div class="line">    PARAMETER,</div><div class="line"></div><div class="line">    <span class="comment">/** Constructor declaration */</span></div><div class="line">   <span class="comment">/** 声明注解作用在构造函数上*/</span></div><div class="line">    CONSTRUCTOR,</div><div class="line"></div><div class="line">    <span class="comment">/** Local variable declaration */</span></div><div class="line">   <span class="comment">/** 声明注解作用在本地变量上*/</span></div><div class="line">    LOCAL_VARIABLE,</div><div class="line"></div><div class="line">    <span class="comment">/** Annotation type declaration */</span></div><div class="line">   <span class="comment">/** 声明注解作用在注解上*/</span></div><div class="line">    ANNOTATION_TYPE,</div><div class="line"></div><div class="line">    <span class="comment">/** Package declaration */</span></div><div class="line">   <span class="comment">/** 声明注解作用在包上*/</span></div><div class="line">    PACKAGE,</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Type parameter declaration</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">   <span class="comment">/** 声明注解可以应用在TYPE声明上*/</span></div><div class="line">    TYPE_PARAMETER,</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Use of a type</div><div class="line">     * Type.TYPE_USE 表示这个 Annotation 可以用在所有使用 Type 的地方（如：泛型，类型转换等）</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    TYPE_USE</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="RetentionPolicy详解"><a href="#RetentionPolicy详解" class="headerlink" title="RetentionPolicy详解"></a>RetentionPolicy详解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RetentionPolicy &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Annotations are to be discarded by the compiler.</div><div class="line">     * 在编译的时候会被取消，只用于声明，理解，或者测试</div><div class="line">     */</div><div class="line">    SOURCE,</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Annotations are to be recorded in the class file by the compiler</div><div class="line">     * but need not be retained by the VM at run time.  This is the default</div><div class="line">     * behavior.</div><div class="line">     * 注解将被编译器记录在类文件中，但在运行时不需要由VM保留，（默认的选项）</div><div class="line">     */</div><div class="line">    CLASS,</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Annotations are to be recorded in the class file by the compiler and</div><div class="line">     * retained by the VM at run time, so they may be read reflectively.</div><div class="line">     * 注解将被编译器记录在类文件中，但在运行时由VM保留，这样他们可以被反射获取（当你需要获取注解中字段的属性值的时候，需要用这个，比如AOP）</div><div class="line">     * <span class="doctag">@see</span> java.lang.reflect.AnnotatedElement</div><div class="line">     */</div><div class="line">    RUNTIME</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="并发模拟工具"><a href="#并发模拟工具" class="headerlink" title="并发模拟工具"></a>并发模拟工具</h2><p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/20180621152956285679441.png" alt="工具"></p>
<h2 id="并发模拟代码"><a href="#并发模拟代码" class="headerlink" title="并发模拟代码"></a>并发模拟代码</h2><p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/20180621152956311599230.png" alt=""></p>
<p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/20180621152956319836166.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[慕课网高并发课程笔记（二）-并发基础]]></title>
      <url>http://shenshanlaoyuan.com/2018/05/04/Java/bingfa2/</url>
      <content type="html"><![CDATA[<h2 id="CPU多级缓存"><a href="#CPU多级缓存" class="headerlink" title="CPU多级缓存"></a>CPU多级缓存</h2><p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/20180531152774962796143.png" alt="CPU多级缓存"></p>
<p>图左侧为最简单的高速缓存的配置，数据的读取和存储都经过高速缓存，CPU核心与高速缓存有一条特殊的快速通道；主存与高速缓存都连在系统总线上（BUS）这条总线还用于其他组件的通信。</p>
<p>在高速缓存出现后不久，系统变得越来越复杂，高速缓存与主存之间的速度差异被拉大，直到加入了另一级缓存，新加入的这级缓存比第一缓存更大，并且更慢，由于加大一级缓存从经济上考虑是行不通的，所以有了二级缓存，甚至是三级缓存。</p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2018/05/04/Java/bingfa2/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2018/05/04/Java/bingfa2/'>慕课网高并发课程笔记（二）-并发基础</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<h3 id="为什么需要CPU缓存？"><a href="#为什么需要CPU缓存？" class="headerlink" title="为什么需要CPU缓存？"></a>为什么需要CPU缓存？</h3><p>CPU的频率太快了，快到主存跟不上，这样在处理器时钟周期内，CPU常常需要等待主存，浪费资源，所以cache的出现，是为了缓解CPU和内存之间速度的不匹配问题（结构：cpu-&gt;cache-&gt;memort）。</p>
<h3 id="CPU缓存有什么意义？"><a href="#CPU缓存有什么意义？" class="headerlink" title="CPU缓存有什么意义？"></a>CPU缓存有什么意义？</h3><ol>
<li>时间局部性：如果某个数据被访问，那么在不久的将来他很可能被再次访问</li>
<li>空间局部性：如果某个数据被访问，那么与他相邻的数据很快也可能被访问</li>
</ol>
<h2 id="CPU多级缓存-缓存一致性（MESI）"><a href="#CPU多级缓存-缓存一致性（MESI）" class="headerlink" title="CPU多级缓存-缓存一致性（MESI）"></a>CPU多级缓存-缓存一致性（MESI）</h2><p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/20180531152775055531383.png" alt="缓存一致性"></p>
<ul>
<li><strong>M: Modified 修改</strong>，指的是该缓存行只被缓存在该CPU的缓存中，并且是被修改过的，因此他与主存中的数据是不一致的，该缓存行中的数据需要在未来的某个时间点（允许其他CPU读取主存相应中的内容之前）写回主存，然后状态变成E（独享）</li>
<li><p><strong>E：Exclusive 独享</strong> ，缓存行只被缓存在该CPU的缓存中，是未被修改过的，与主存的数据是一致的，可以在任何时刻当有其他CPU读取该内存时，变成S（共享）状态，当CPU修改该缓存行的内容时，变成M（被修改）的状态</p>
</li>
<li><p><strong>S：Share 共享</strong>，意味着该缓存行可能会被多个CPU进行缓存，并且该缓存中的数据与主存数据是一致的，当有一个CPU修改该缓存行时，其他CPU是可以被作废的，变成I(无效的)</p>
</li>
<li><strong>I：Invalid 无效的</strong>，代表这个缓存是无效的，可能是有其他CPU修改了该缓存行</li>
</ul>
<p>用于保证多个CPU cache之间缓存共享数据的一致</p>
<ul>
<li>local read：读本地缓存的数据</li>
<li>local write：将数据写到本地缓存里面</li>
<li>remote read：将内（主）存中的数据读取到缓存中来</li>
<li>remote write：将缓存中的数据写会到主存里面</li>
</ul>
<p>在一个典型的多核系统中，每一个核都会有自己的缓存来共享主存总线，每一个CPU会发出读写（I/O）请求，而缓存的目的是为了减少CPU读写共享主存的次数；<br>一个缓存除了在Invaild状态，都可以满足CPU 的读请求</p>
<p>一个写请求只有在M状态，或者E状态的时候才能给被执行，如果是处在S状态的时候，他必须先将该缓存行变成I状态，<br>这个操作通常作用于广播的方式来完成，这个时候他既不允许不同的CPU同时修改同一个缓存行，即使是修改同一个缓存行中不同端的数据也是不可以的，这里主要解决的是缓存一致性的问题，<br>一个M状态的缓存行必须时刻监听所有试图读该缓存行相对主存的操作，这种操作必须在缓存该缓存行被写会到主存，并将状态变成S状态之前，被延迟执行</p>
<p>一个处于S状态的缓存行，也必须监听其他缓存使该缓存行无效，或者独享该缓存行的请求，并将缓存行变成无效</p>
<p>一个处于E状态的缓存行，他要监听其他缓存读缓存行的操作，一旦有，那么他讲变成S状态</p>
<p>因此对于M和E状态，他们的数据总是一致的与缓存行的真正状态总是保持一致的，<br>但是S状态可能是非一致的，如果一个缓存将处于S状态的 缓存行作废了，另一个缓存可能已经独享了该缓存行，<br>但是该缓存缺不会讲该缓存行升迁为E状态，这是因为其他缓存不会广播他们已经作废掉该缓存行的通知，<br>同样由于缓存并没有保存该缓存行被COPY的数量，因此没有办法确定是否独享了改缓存行，<br>这是一种投机性的优化，因为如果一个CPU想修改一个处于S状态的缓存行，总线需要将所有使用该缓存行的COPY的值变成Invaild状态才可以，而修改E状态的缓存 却不需要这样做</p>
<h2 id="CPU多级缓存-乱序执行优化"><a href="#CPU多级缓存-乱序执行优化" class="headerlink" title="CPU多级缓存-乱序执行优化"></a>CPU多级缓存-乱序执行优化</h2><p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/2018053115277513621658.png" alt="乱序执行优化"></p>
<p>处理器多核和缓存导致的一个问题，如果我们不做任何处理，在多核的情况下，的实际结果可能和逻辑运行结果大不相同，如果在一个核上执行数据写入操作，并在最后执行一个操作来标记数据已经写入好了，而在另外一个核上通过该标记位判定数据是否已经写入，这时候就可能出现不一致，标记位先被写入，但是实际的操作缺并未完成，这个未完成既有可能是没有计算完成，也有可能是缓存没有被及时刷新到主存之中，使得其他核读到了错误的数据</p>
<h2 id="Java内存模型（Java-Memory-Model，JMM）"><a href="#Java内存模型（Java-Memory-Model，JMM）" class="headerlink" title="Java内存模型（Java Memory Model，JMM）"></a>Java内存模型（Java Memory Model，JMM）</h2><h3 id="JAVA内存模型规范"><a href="#JAVA内存模型规范" class="headerlink" title="JAVA内存模型规范"></a>JAVA内存模型规范</h3><p>规定了一个线程如何和何时可以看到其他线程修改过后的共享变量的值 以及何时同步的访问共享变量。</p>
<h3 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h3><p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/20180531152775218881565.png" alt="Java内存模型"></p>
<ul>
<li><p>Heap(堆)：java里的堆是一个运行时的数据区，堆是由垃圾回收来负责的，堆的优势是可以动态的分配内存大小，生存期也不必事先告诉编译器，因为他是在运行时动态分配内存的，java的垃圾回收器会定时收走不用的数据， 缺点是由于要在运行时动态分配，所有存取速度可能会慢一些</p>
</li>
<li><p>Stack(栈)：栈的优势是存取速度比堆要快，仅次于计算机里的寄存器，栈的数据是可以共享的，缺点是存在栈中的数据的大小与生存期必须是确定的，缺乏一些灵活性。栈中主要存放一些基本类型的变量，比如int，short，long，byte，double，float，boolean，char，对象句柄，</p>
</li>
</ul>
<p>java内存模型要求调用栈和本地内存变量存放在线程栈（Thread Stack）上，对象存放在堆上。<br>一个本地变量可能存放一个对象的引用，这时引用变量存放在本地栈上，但是对象本身存放在堆上</p>
<p>成员变量跟随着对象存放在堆上，而不管是原始类型还是引用类型，静态成员变量跟随着类的定义一起存在在堆上</p>
<p>存在堆上的对象，可以被持有这个对象的引用的线程访问</p>
<p>如果两个线程同时访问同一个对象的私有变量，这时他们获得的是这个对象的私有拷贝</p>
<h3 id="计算机硬件架构"><a href="#计算机硬件架构" class="headerlink" title="计算机硬件架构"></a>计算机硬件架构</h3><p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/2018053115277525758516.png" alt="计算机硬件架构"></p>
<p>CPU：一个计算机一般有多个CPU，一个CPU还会有多核</p>
<p>CPU Registers（寄存器）：每个CPU都包含一系列的寄存器，他们是CPU内存的基础，CPU在寄存器上执行的速度远大于在主存上执行的速度。</p>
<p>CPU Cache（高速缓存）：由于计算机的存储设备与处理器的处理设备有着几个数量级的差距，所以现代计算机都会加入一层读写速度与处理器处理速度接近想通的高级缓存来作为内存与处理器之间的缓冲，将运算使用到的数据复制到缓存中，让运算能够快速的执行，当运算结束后，再从缓存同步到内存之中，这样，CPU就不需要等待缓慢的内存读写了</p>
<p>主（内）存：一个计算机包含一个主存，所有的CPU都可以访问主存，主存比缓存容量大的多</p>
<p>运作原理：通常情况下，当一个CPU要读取主存的时候，他会将主存中的数据读取到CPU缓存中，甚至将缓存中的内容读到内部寄存器里面，然后再寄存器执行操作，<br>当运行结束后，会将寄存器中的值刷新回缓存中，并在某个时间点刷新回主存</p>
<h3 id="内存模型与硬件架构之间的关联"><a href="#内存模型与硬件架构之间的关联" class="headerlink" title="内存模型与硬件架构之间的关联"></a>内存模型与硬件架构之间的关联</h3><p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/20180531152775282044126.png" alt="内存模型与硬件架构之间的关联"></p>
<p>所有线程栈和堆会被保存在缓存里面，部分可能会出现在CPU缓存中和CPU内部的寄存器里面</p>
<h3 id="线程和主内存之间的抽象关系"><a href="#线程和主内存之间的抽象关系" class="headerlink" title="线程和主内存之间的抽象关系"></a>线程和主内存之间的抽象关系</h3><p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/20180531152775299434958.png" alt="线程和主内存之间的抽象关系"></p>
<p>每个线程之间共享变量都存放在主内存里面，每个线程都有一个私有的本地内存<br>本地内存是java内存模型中抽象的概念，并不是真实存在的（他涵盖了缓存写缓冲区。寄存器，以及其他硬件的优化），本地内存中存储了以读或者写共享变量的拷贝的一个副本，从一个更低的层次来说，线程本地内存，他是cpu缓存，寄存器的一个抽象描述，而JVM的静态内存存储模型，他只是一种对内存模型的物理划分而已，只局限在内存，而且只局限在JVM的内存</p>
<p>如果线程A和线程B要通信，必须经历两个过程：<br>1、A将本地内存变量刷新到主内存<br>2、B从主内存中读取变量</p>
<h3 id="Java内存模型-同步八种操作及规则"><a href="#Java内存模型-同步八种操作及规则" class="headerlink" title="Java内存模型-同步八种操作及规则"></a>Java内存模型-同步八种操作及规则</h3><p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/20180531152775338016819.png" alt="同步操作与规则"></p>
<ul>
<li>lock（锁定）：作用于主内存的变量，把一个变量标识变为一条线程独占状态</li>
<li>unlock（解锁）：作用于主内存的变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定</li>
<li>read（读取）：作用于主内存的变量，把一个变量值从主内存传输到线程的工作内存中，以便随后的load动作使用</li>
<li>load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中</li>
<li>use（使用）：作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎</li>
<li>assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接受到的值赋值给工作内存的变量</li>
<li>store（存储）：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的write的操作</li>
<li>write（写入）：作用于主内存的变量，它把store操作从工作内存中一个变量的值传送到主内存的变量中</li>
</ul>
<p><strong>同步规则：</strong></p>
<ol>
<li>如果要把一个变量从主内存中赋值到工作内存，就需要按顺序得执行read和load操作，如果把变量从工作内存中同步回主内存中，就要按顺序得执行store和write操作，但java内存模型只要求上述操作必须按顺序执行，没有保证必须是连续执行</li>
<li>不允许read和load、store和write操作之一单独出现</li>
<li>不允许一个线程丢弃他的最近assign的操作，即变量在工作内存中改变了之后必须同步到主内存中</li>
<li>不允许一个线程无原因地（没有发生过任何assign操作）把数据从工作内存同步到主内存中</li>
<li>一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量。即就是对一个变量实施use和store操作之前，必须先执行过了load和assign操作</li>
<li>一个变量在同一时刻只允许一条线程对其进行lock操作，但lock操作可以同时被一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会解锁，lock和unlock必须成对出现</li>
<li>如果一个变量执行lock操作，将会清空工作内存中此变量的值，在执行引擎中使用这个变量前需要重新执行load或assign操作初始化变量的值</li>
<li>如果一个变量事先没有被lock操作锁定，则不允许他执行unlock操作，也不允许去unlock一个被其他线程锁定的变量</li>
<li>对一个变量执行unlock操作之前，必须先把此变量同步到主内存中（执行store和write操作）</li>
</ol>
<h2 id="并发的优势和风险"><a href="#并发的优势和风险" class="headerlink" title="并发的优势和风险"></a>并发的优势和风险</h2><p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/20180531152775386366786.png" alt="并发的优势和风险"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[慕课网高并发课程笔记（一）-并发和高并发基本概念]]></title>
      <url>http://shenshanlaoyuan.com/2018/05/01/Java/bingfa1/</url>
      <content type="html"><![CDATA[<h1 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h1><p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/2018053115277481628838.png" alt="Java并发编程与高并发解决方案"></p>
<p>课程结合大量图示及代码演示，让你更容易， 更系统的掌握多线程并发编程（线程安全，线程调度，线程封闭，同步容器等）与高并发处理思路与手段（扩容，缓存，队列，拆分等）相关知识和经验。帮助你构建完整的并发与高并发知识体系，胜任实际开发中并发与高并发问题的处理，倍增高薪面试成功率！</p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2018/05/01/Java/bingfa1/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2018/05/01/Java/bingfa1/'>慕课网高并发课程笔记（一）-并发和高并发基本概念</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<h2 id="课程地址"><a href="#课程地址" class="headerlink" title="课程地址"></a>课程地址</h2><p><a href="https://coding.imooc.com/class/195.html" target="_blank" rel="external">慕课网</a></p>
<p><a href="https://pan.baidu.com/s/16tDdVXjM9fcvC1cSSwCSMw" target="_blank" rel="external">百度网盘</a><br><strong>密码arkw </strong>（资源来源于网络，如有侵权联系删除！）</p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p>同时拥有两个或者多个线程，如果程序在单核处理器上运行，多个线程交替得换入或者换出内存，这些线程是同时“存在”的，每个线程都处于执行过程中的某个状态，如果运行在多核处理器上，此时，程序中的每个线程都将分配到一个处理器核上，因此可以同时运行。</p>
<h2 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h2><p>高并发（High Concurrency）是互联网分布式系统架构设计中必须考虑的因素之一，他通常是指，通过设计保证系统能够<strong>同时并行处理</strong>很多请求。</p>
<h2 id="并发和高并发对比"><a href="#并发和高并发对比" class="headerlink" title="并发和高并发对比"></a>并发和高并发对比</h2><ul>
<li>谈并发时：多个线程操作相同的资源，保证线程安全，合理利用资源</li>
<li>谈高并发时：服务能同时处理很多请求（如12306的抢票，天猫双十一的秒杀活动，这会导致系统在短时间内执行大量的操作，如对资源的请求，数据库的访问），提高程序性能（如果高并发处理不好，不光会导致用户体验不好，还可能会使服务器宕机，出现OOM等）</li>
</ul>
<h1 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h1><p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/2018053115277476981651.png" alt="内容介绍"></p>
<p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/2018053115277479279969.png" alt="2"></p>
<p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/20180531152774805567397.png" alt="3"></p>
<p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/20180531152774831768296.png" alt="4"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python入门]]></title>
      <url>http://shenshanlaoyuan.com/2018/04/07/Python/python%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>Python入门系列电子书，搭配廖雪峰的<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external"><font color="blue">Python教程</font></a>学习效果更佳。</p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2018/04/07/Python/python入门/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2018/04/07/Python/python入门/'>Python入门</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<h2 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h2><p><a href="http://shenshanlaoyuan.com/PythonTraining/linux%E5%9F%BA%E7%A1%80/"><font color="blue">Linux操作系统基础</font></a></p>
<p><a href="http://shenshanlaoyuan.com/PythonTraining/Python%E5%9F%BA%E7%A1%80/"><font color="blue">Python语法基础</font></a></p>
<h2 id="Python核心编程"><a href="#Python核心编程" class="headerlink" title="Python核心编程"></a>Python核心编程</h2><p><a href="http://shenshanlaoyuan.com/PythonTraining//Python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/python%E9%AB%98%E7%BA%A7/html%E7%89%88/python%E9%AB%98%E7%BA%A7-%E8%AF%BE%E4%BB%B6/"><font color="blue">Python高级</font></a></p>
<p><a href="http://shenshanlaoyuan.com/PythonTraining/Python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/html%E7%89%88/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B-%E5%AE%8C%E6%95%B4%E8%AF%BE%E4%BB%B6/"><font color="blue">系统编程</font></a></p>
<p><a href="http://shenshanlaoyuan.com/PythonTraining/Python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/html%E7%89%88/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E5%85%A8%E9%83%A8%E8%AF%BE%E4%BB%B6/"><font color="blue">网络编程</font></a></p>
<p><a href="http://shenshanlaoyuan.com/PythonTraining/Python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A1%88%E4%BE%8B/Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A1%88%E4%BE%8B%E8%AF%BE%E4%BB%B6/"><font color="blue">web服务器案例</font></a></p>
<p><a href="http://shenshanlaoyuan.com/PythonTraining/Python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%BE%E4%BB%B6/"><font color="blue">正则表达式</font></a></p>
<h2 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h2><p><a href="http://shenshanlaoyuan.com/PythonTraining/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"><font color="blue">数据结构与算法</font></a></p>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p><a href="http://shenshanlaoyuan.com/PythonTraining/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"><font color="blue">MySQL</font></a></p>
<p><a href="http://shenshanlaoyuan.com/PythonTraining/%E6%95%B0%E6%8D%AE%E5%BA%93/mongo/"><font color="blue">mongo</font></a></p>
<p><a href="http://shenshanlaoyuan.com/PythonTraining/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/"><font color="blue">redis</font></a></p>
<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p><a href="http://shenshanlaoyuan.com/PythonTraining/%E5%89%8D%E7%AB%AF/"><font color="blue">前端</font></a></p>
<h2 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h2><p><a href="http://shenshanlaoyuan.com/PythonTraining/django/"><font color="blue">Django</font></a></p>
<h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><p><a href="http://shenshanlaoyuan.com/PythonTraining/%E7%88%AC%E8%99%AB/"><font color="blue">爬虫</font></a></p>
<h2 id="Tornado"><a href="#Tornado" class="headerlink" title="Tornado"></a>Tornado</h2><p><a href="http://shenshanlaoyuan.com/PythonTraining/tornado/"><font color="blue">Tornado</font></a></p>
<h2 id="shell和自动化运维"><a href="#shell和自动化运维" class="headerlink" title="shell和自动化运维"></a>shell和自动化运维</h2><p><a href="http://shenshanlaoyuan.com/PythonTraining/shell/shell%E8%AF%BE%E4%BB%B6/%E8%BF%90%E7%BB%B4%E5%92%8Cshell.html"><font color="blue">shell</font></a></p>
<p><a href="http://shenshanlaoyuan.com/PythonTraining/shell/nginx%E8%AF%BE%E4%BB%B6/nginx%E8%AF%BE%E4%BB%B6.html"><font color="blue">nginx</font></a></p>
<p><a href="http://shenshanlaoyuan.com/PythonTraining/shell/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2.html"><font color="blue">自动化部署</font></a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux(CentOS) 下安装 ZooKeeper]]></title>
      <url>http://shenshanlaoyuan.com/2017/05/07/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/CentOS-install-ZooKeeper/</url>
      <content type="html"><![CDATA[<h2 id="1-单机模式-Standalone-mode"><a href="#1-单机模式-Standalone-mode" class="headerlink" title="1.单机模式(Standalone mode)"></a>1.单机模式(Standalone mode)</h2><h3 id="下载解压"><a href="#下载解压" class="headerlink" title="下载解压"></a>下载解压</h3><p><a href="http://apache.fayea.com/zookeeper/" target="_blank" rel="external">官网</a>下载或使用 wget 命令下载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># wget http://archive.apache.org/dist/zookeeper/stable/zookeeper-3.4.9.tar.gz</div><div class="line"># tar zxf zookeeper-3.4.9.tar.gz</div></pre></td></tr></table></figure></p>
<p>如果 <code>wget</code> 命令找不到，先安装 wget 的 RPM 包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum -y install wget</div></pre></td></tr></table></figure></p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2017/05/07/环境搭建/CentOS-install-ZooKeeper/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2017/05/07/环境搭建/CentOS-install-ZooKeeper/'>Linux(CentOS) 下安装 ZooKeeper</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<h3 id="启动-ZooKeeper"><a href="#启动-ZooKeeper" class="headerlink" title="启动 ZooKeeper"></a>启动 ZooKeeper</h3><p>进入 zookeeper 解压后的目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># cd zookeeper-3.4.9</div><div class="line"># ll</div></pre></td></tr></table></figure></p>
<p><img src="http://ww1.sinaimg.cn/large/006tNc79gy1ffcx8fxfklj30v80iqjrz.jpg" alt=""></p>
<p>在目录下面创建 data 目录<br>/root/zookeeper-3.4.9/data<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># mkdir data</div></pre></td></tr></table></figure></p>
<p>修改 conf 目录下面的 zoo_sample.cfg 配置文件名字</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># mv conf/zoo_sample.cfg conf/zoo.cfg</div></pre></td></tr></table></figure>
<p>再修改配置文件内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># vim conf/zoo.cfg</div></pre></td></tr></table></figure>
<p>如果没找到vim 命令先安装下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum -y install vim*</div></pre></td></tr></table></figure></p>
<p>把 dataDir 后面改成刚才创建的 data 目录全路径，如下图</p>
<p><img src="http://ww4.sinaimg.cn/large/006tNc79gy1ffcx2viortj30vc0imwfa.jpg" alt=""></p>
<p>进入bin目录开启 ZooKeeper<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># cd bin</div><div class="line"># ./zkServer.sh start</div></pre></td></tr></table></figure></p>
<p>查看是否开启开启成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ./zkServer.sh status</div></pre></td></tr></table></figure></p>
<p>出现如下内容开启成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ZooKeeper JMX enabled by default</div><div class="line">Using config: /root/zookeeper-3.4.9/bin/../conf/zoo.cfg</div><div class="line">Mode: standalone</div></pre></td></tr></table></figure></p>
<h3 id="关闭-ZooKeeper"><a href="#关闭-ZooKeeper" class="headerlink" title="关闭 ZooKeeper"></a>关闭 ZooKeeper</h3><p>进入 bin 目录输入命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ./zkServer.sh stop</div></pre></td></tr></table></figure>
<h2 id="2-集群模式-Replicated-mode"><a href="#2-集群模式-Replicated-mode" class="headerlink" title="2.集群模式(Replicated mode)"></a>2.集群模式(Replicated mode)</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决 CentOS 安装完成后 ifconfig 命令不能用问题]]></title>
      <url>http://shenshanlaoyuan.com/2017/05/07/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E8%A7%A3%E5%86%B3CentOS7%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%E5%90%8Eifconfig%E5%91%BD%E4%BB%A4%E4%B8%8D%E8%83%BD%E7%94%A8%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>本来想查看一下本机的 ip 地址，ifconfig 命令报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># ifconfig</div><div class="line">-bash: ifconfig: command not found</div></pre></td></tr></table></figure></p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2017/05/07/环境搭建/解决CentOS7安装完成后ifconfig命令不能用问题/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2017/05/07/环境搭建/解决CentOS7安装完成后ifconfig命令不能用问题/'>解决 CentOS 安装完成后 ifconfig 命令不能用问题</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><h3 id="1-查看-ifconfig-命令是否存在"><a href="#1-查看-ifconfig-命令是否存在" class="headerlink" title="1.查看 ifconfig 命令是否存在"></a>1.查看 ifconfig 命令是否存在</h3><p>查看 <code>/sbin/ifconfig</code> 是否存在</p>
<h3 id="2-如果-ifconfig-命令不存在"><a href="#2-如果-ifconfig-命令不存在" class="headerlink" title="2.如果 ifconfig 命令不存在"></a>2.如果 ifconfig 命令不存在</h3><p>执行下面两个命令安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># yum upgrade</div><div class="line"># yum install net-tools</div></pre></td></tr></table></figure></p>
<h3 id="3-如果-ifconfig-命令存在，设置环境变量"><a href="#3-如果-ifconfig-命令存在，设置环境变量" class="headerlink" title="3.如果 ifconfig 命令存在，设置环境变量"></a>3.如果 ifconfig 命令存在，设置环境变量</h3><p> 临时修改环境变量：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># export PATH = $PATH:/sbin</div></pre></td></tr></table></figure></p>
<p>永久修改环境变量只要修改 <code>/etc/profile</code> 文件即可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac OS X下Maven的安装与配置]]></title>
      <url>http://shenshanlaoyuan.com/2017/05/06/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/MacOS-Maven/</url>
      <content type="html"><![CDATA[<h2 id="Maven-下载"><a href="#Maven-下载" class="headerlink" title="Maven 下载"></a>Maven 下载</h2><p><a href="https://maven.apache.org/download.cgi" target="_blank" rel="external">官网下载</a>压缩包,选择 <code>Binary zip archive</code><br><img src="http://ww2.sinaimg.cn/large/006tNc79gy1ffbqojfs9wj314e0j6dgt.jpg" alt=""></p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2017/05/06/环境搭建/MacOS-Maven/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2017/05/06/环境搭建/MacOS-Maven/'>Mac OS X下Maven的安装与配置</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<p>打开终端，输入<code>unzip</code>和拖动这个压缩文件到终端，解压<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ unzip /Users/shenshanlaoyuan/Downloads/apache-maven-3.5.0-bin.zip</div></pre></td></tr></table></figure></p>
<p>输入<code>ls</code>,会看到<code>apache-maven-3.5.0</code>这个文件夹<br><img src="http://ww2.sinaimg.cn/large/006tNc79gy1ffbrd29legj30vg0k83z8.jpg" alt=""></p>
<p><code>cd</code>进入到这个文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cd apache-maven-3.5.0</div></pre></td></tr></table></figure></p>
<p>再输入<code>pwd</code>命令得到当前文件夹全路径，选中复制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pwd</div></pre></td></tr></table></figure></p>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>打开终端，输入以下命令，编辑<code>bash_profile</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi ~/.bash_profile</div></pre></td></tr></table></figure></p>
<p>添加以下代码在最后,<code>M2_HOME=</code>后面改成刚才复制的文件夹全路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># maven</div><div class="line">export M2_HOME=/Users/shenshanlaoyuan/apache-maven-3.5.0</div><div class="line">export PATH=$PATH:$M2_HOME/bin</div></pre></td></tr></table></figure></p>
<p>编辑完成按ESC键跳到命令模式，输入<code>:wq</code>就能保存并退出 vi。</p>
<p>最后输入如下命令以使修改的<code>bash_profile</code>文件生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ source ~/.bash_profile</div></pre></td></tr></table></figure></p>
<h2 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mvn -v</div></pre></td></tr></table></figure>
<p>如果输出以下信息，说明 maven 安装成功了<br><img src="http://ww1.sinaimg.cn/large/006tNc79gy1ffbs6phvsfj30vi0kedh2.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring 框架之bean标签属性]]></title>
      <url>http://shenshanlaoyuan.com/2017/03/04/Java/spring-bean-tag/</url>
      <content type="html"><![CDATA[<p>主要有id、class、scope、init-method、destroy-method等。</p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2017/03/04/Java/spring-bean-tag/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2017/03/04/Java/spring-bean-tag/'>Spring 框架之bean标签属性</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<h2 id="id属性和name属性的区别"><a href="#id属性和name属性的区别" class="headerlink" title="id属性和name属性的区别"></a>id属性和name属性的区别</h2><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>Bean起个名字，在约束中采用ID的约束，唯一</p>
<ul>
<li>取值要求：必须以字母开始，可以使用字母、数字、连字符、下划线、句话、冒号    id:不能出现特殊字符</li>
</ul>
<h3 id="name"><a href="#name" class="headerlink" title="name"></a>name</h3><p>Bean起个名字，没有采用ID的约束</p>
<ul>
<li>取值要求：name:出现特殊字符.如果<bean>没有id的话 , name可以当做id使用</bean></li>
<li>Spring框架在整合Struts1的框架的时候，Struts1的框架的访问路径是以 / 开头的，例如：<code>/bookAction</code></li>
</ul>
<h2 id="class属性"><a href="#class属性" class="headerlink" title="class属性"></a>class属性</h2><p>Bean对象的全路径</p>
<h2 id="scope属性"><a href="#scope属性" class="headerlink" title="scope属性"></a>scope属性</h2><p>scope属性代表Bean的作用范围</p>
<ul>
<li>singleton            – 单例（默认值）</li>
<li>prototype            – 多例，在Spring框架整合Struts2框架的时候，Action类也需要交给Spring做管理，配置把Action类配置成多例！！</li>
<li>request            – 应用在Web项目中,每次HTTP请求都会创建一个新的Bean</li>
<li>session            – 应用在Web项目中,同一个HTTP Session 共享一个Bean</li>
<li>globalsession        – 应用在Web项目中,多服务器间的session</li>
</ul>
<h2 id="Bean对象的创建和销毁的两个属性配置"><a href="#Bean对象的创建和销毁的两个属性配置" class="headerlink" title="Bean对象的创建和销毁的两个属性配置"></a>Bean对象的创建和销毁的两个属性配置</h2><p>Spring初始化bean或销毁bean时，有时需要作一些处理工作，因此spring可以在创建和拆卸bean的时候调用bean的两个生命周期方法</p>
<h3 id="init-method"><a href="#init-method" class="headerlink" title="init-method"></a>init-method</h3><p>当bean被载入到容器的时候调用init-method属性指定的方法</p>
<h3 id="destroy-method"><a href="#destroy-method" class="headerlink" title="destroy-method"></a>destroy-method</h3><p>当bean从容器中删除的时候调用destroy-method属性指定的方法</p>
<p>想查看destroy-method的效果，有如下条件</p>
<ul>
<li>scope= singleton有效</li>
<li>web容器中会自动调用，但是main函数或测试用例需要手动调用（需要使用ClassPathXmlApplicationContext的close()方法）</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring 框架之Bean工厂]]></title>
      <url>http://shenshanlaoyuan.com/2017/03/04/Java/spring-bean-factory/</url>
      <content type="html"><![CDATA[<p>Spring 通过 Bean 工厂创建 Bean 对象。分别是ApplicationContext 和 BeanFactory 。</p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2017/03/04/Java/spring-bean-factory/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2017/03/04/Java/spring-bean-factory/'>Spring 框架之Bean工厂</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<h2 id="ApplicationContext接口"><a href="#ApplicationContext接口" class="headerlink" title="ApplicationContext接口"></a>ApplicationContext接口</h2><p>使用该工厂接口可以获取到具体的Bean对象。该接口下有两个具体的实现类</p>
<ul>
<li>ClassPathXmlApplicationContext            – 加载类路径下的Spring配置文件</li>
<li>FileSystemXmlApplicationContext            – 加载本地磁盘下的Spring配置文件</li>
</ul>
<h2 id="BeanFactory工厂"><a href="#BeanFactory工厂" class="headerlink" title="BeanFactory工厂"></a>BeanFactory工厂</h2><p>Spring框架早期的创建Bean对象的工厂接口</p>
<ul>
<li>使用BeanFactory接口也可以获取到Bean对象<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">	BeanFactory factory = <span class="keyword">new</span> XmlBeanFactory(<span class="keyword">new</span> ClassPathResource(<span class="string">"applicationContext.xml"</span>));</div><div class="line">	UserService us = (UserService) factory.getBean(<span class="string">"us"</span>);</div><div class="line">	us.sayHello();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="BeanFactory-和-ApplicationContext-的区别"><a href="#BeanFactory-和-ApplicationContext-的区别" class="headerlink" title="BeanFactory 和 ApplicationContext 的区别"></a>BeanFactory 和 ApplicationContext 的区别</h2><ul>
<li>BeanFactory                – BeanFactory 采取延迟加载，第一次getBean时才会初始化Bean</li>
<li>ApplicationContext        – 在加载<code>applicationContext.xml</code>时候就会创建具体的Bean对象的实例，还提供了一些其他的功能<ul>
<li>事件传递</li>
<li>Bean自动装配</li>
<li>各种不同应用层的Context实现</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring 框架之IoC]]></title>
      <url>http://shenshanlaoyuan.com/2017/03/04/Java/spring-IoC/</url>
      <content type="html"><![CDATA[<h1 id="什么是IoC"><a href="#什么是IoC" class="headerlink" title="什么是IoC?"></a>什么是IoC?</h1><p>Inversion of Control，控制反转,英文缩写为IoC。将对象的创建权交给了Spring。</p>
<p>使用IoC可以解决程序耦合性高的问题。</p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2017/03/04/Java/spring-IoC/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2017/03/04/Java/spring-IoC/'>Spring 框架之IoC</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<h1 id="简单IoC示例"><a href="#简单IoC示例" class="headerlink" title="简单IoC示例"></a>简单IoC示例</h1><h2 id="步骤一-下载Spring的开发包"><a href="#步骤一-下载Spring的开发包" class="headerlink" title="步骤一:下载Spring的开发包"></a>步骤一:下载Spring的开发包</h2><p><a href="http://spring.io/" target="_blank" rel="external">官网</a>或者<a href="http://repo.springsource.org/libs-release-local/org/springframework/spring" target="_blank" rel="external">下载地址</a>下载</p>
<p>解压后目录结构:</p>
<ul>
<li>docs         :API和开发规范.</li>
<li>libs         :jar包和源码.</li>
<li>schema        :约束.</li>
</ul>
<h2 id="步骤二-创建web项目-引入Spring的开发包"><a href="#步骤二-创建web项目-引入Spring的开发包" class="headerlink" title="步骤二:创建web项目,引入Spring的开发包"></a>步骤二:创建web项目,引入Spring的开发包</h2><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fgwf88f03zj30m006qq2z.jpg" alt=""></p>
<h2 id="步骤三-创建Spring配置文件"><a href="#步骤三-创建Spring配置文件" class="headerlink" title="步骤三:创建Spring配置文件"></a>步骤三:创建Spring配置文件</h2><p>在src目录下创建<code>applicationContext.xml</code>文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">        http://www.springframework.org/schema/beans </div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;</div><div class="line">	</div><div class="line">   	<span class="comment">&lt;!-- 使用bean标签 --&gt;</span></div><div class="line">   	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.shenshanlaoyuan.demo.UserServiceImpl"</span>&gt;</span></div><div class="line">   	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="步骤四-编写相关的类"><a href="#步骤四-编写相关的类" class="headerlink" title="步骤四:编写相关的类"></a>步骤四:编写相关的类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"hello spring"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="步骤五-配置Bean"><a href="#步骤五-配置Bean" class="headerlink" title="步骤五:配置Bean"></a>步骤五:配置Bean</h2><p>在<code>applicationContext.xml</code>文件<code>beans</code>标签下添加<code>bean</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.shenshanlaoyuan.demo.UserServiceImpl"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="步骤六-编写测试类"><a href="#步骤六-编写测试类" class="headerlink" title="步骤六:编写测试类"></a>步骤六:编写测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试类</div><div class="line"> * <span class="doctag">@author</span> shenshanlaoyuan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> </span>&#123;</div><div class="line">	<span class="comment">//原来的方式</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSayHello1</span><span class="params">()</span></span>&#123;</div><div class="line">		UserServiceImpl usi = <span class="keyword">new</span> UserServiceImpl();</div><div class="line">		usi.sayHello();</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//spring方式</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSayHello2</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//创建工厂，加载配置文件</span></div><div class="line">		ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</div><div class="line">		<span class="comment">//从工厂中获取到对象</span></div><div class="line">		UserService us = (UserService) ac.getBean(<span class="string">"userService"</span>);</div><div class="line">		<span class="comment">//调用对象的方法</span></div><div class="line">		us.sayHello();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例源代码"><a href="#示例源代码" class="headerlink" title="示例源代码"></a><a href="https://github.com/shenshanlaoyuan/PracticeDemo/tree/master/SpringIoCDemo" target="_blank" rel="external">示例源代码</a></h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring 框架之框架概述]]></title>
      <url>http://shenshanlaoyuan.com/2017/03/03/Java/spring-summary/</url>
      <content type="html"><![CDATA[<h1 id="什么是-Spring？"><a href="#什么是-Spring？" class="headerlink" title="什么是 Spring？"></a>什么是 Spring？</h1><ul>
<li>Spring 是一个开源框架。</li>
<li>Spring 是于2003 年兴起的一个轻量级的 Java 开发框架，由 Rod Johnson 在其著作 Expert One-On-One J2EE Development and Design 中阐述的部分理念和原型衍生而来。</li>
<li>它是为了解决企业应用开发的复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许使用者选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。</li>
<li>Spring 使用基本的 JavaBean 来完成以前只可能由EJB完成的事情。然而，Spring 的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何 Java 应用都可以从 Spring 中受益。</li>
<li>Spring 的核心是控制反转（IoC）和面向切面（AOP）。简单来说，Spring 是一个分层的 JavaSE/EEfull-stack(一站式) 轻量级开源框架。</li>
</ul>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2017/03/03/Java/spring-summary/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2017/03/03/Java/spring-summary/'>Spring 框架之框架概述</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<h1 id="为什么用-Spring？"><a href="#为什么用-Spring？" class="headerlink" title="为什么用 Spring？"></a>为什么用 Spring？</h1><ul>
<li>方便解耦，简化开发</li>
</ul>
<p>Spring就是一个大工厂，可以将所有对象创建和依赖关系维护，交给Spring管理AOP编程的支持</p>
<ul>
<li>AOP编程的支持</li>
</ul>
<p>Spring提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能</p>
<ul>
<li>声明式事务的支持</li>
</ul>
<p>只需要通过配置就可以完成对事务的管理，而无需手动编程</p>
<ul>
<li>方便程序的测试</li>
</ul>
<p>Spring对Junit4支持，可以通过注解方便的测试Spring程序</p>
<ul>
<li>方便集成各种优秀框架</li>
</ul>
<p>Spring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架（如：Struts、Hibernate、MyBatis、Quartz等）的直接支持</p>
<ul>
<li>降低JavaEE API的使用难度</li>
</ul>
<p>Spring 对JavaEE开发中非常难用的一些API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[引入开源项目的正确姿势]]></title>
      <url>http://shenshanlaoyuan.com/2017/02/27/Android/%E5%BC%95%E5%85%A5%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</url>
      <content type="html"><![CDATA[<h2 id="为什么要用开源项目？"><a href="#为什么要用开源项目？" class="headerlink" title="为什么要用开源项目？"></a>为什么要用开源项目？</h2><p>软件开发领域一直有一个原则，DRY，Don’t repeat yourself，翻译过来就是”<strong>不要重复造轮子</strong>“。一个项目的开发，我们不可能一切从 0 开始，如果真要那样··· 开源项目的主要目的是共享，其实就为了让大家不要重复造轮子，尤其在互联网这个快速发展的领域，速度就是生命，引入开源项目，可以节省大量的人力和时间。</p>
<p>虽说开源项目为我们节省了大量的人力和时间，但是开源项目并不是完美的，相信使用过开源项目的人都大大小小踩过一些坑，如代码不规范啊，项目有 bug 啊等等，出了问题都会为我们的项目以及公司带来不小的影响，这个时候如何选择开源项目就变得很重要。</p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2017/02/27/Android/引入开源项目的正确姿势/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2017/02/27/Android/引入开源项目的正确姿势/'>引入开源项目的正确姿势</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<h2 id="如何选择开源项目"><a href="#如何选择开源项目" class="headerlink" title="如何选择开源项目"></a>如何选择开源项目</h2><h3 id="1-看-Star-数"><a href="#1-看-Star-数" class="headerlink" title="1.看 Star 数"></a>1.看 Star 数</h3><p>一般来说都会选则按 Star 数来排序，当然 Star 数高不代表是完美的，但起码说明该项目蛮火的，不然也不会那么多人 Star 的。</p>
<h3 id="2-看作者"><a href="#2-看作者" class="headerlink" title="2.看作者"></a>2.看作者</h3><p>如 JakeWharton 大神、Facebook 团队等。大神和大公司出品的框架质量相对较高，可保证后续的维护和 Bug 修复，不容易烂尾。</p>
<h3 id="3-看最后更新时间、Issues、Fork-等"><a href="#3-看最后更新时间、Issues、Fork-等" class="headerlink" title="3.看最后更新时间、Issues、Fork 等"></a>3.看最后更新时间、Issues、Fork 等</h3><p>GitHub上有些的项目好几个月甚至一年没更新了，对于一个开源项目来说最怕的是作者不维护了，这就意味着之后再也不会有改进了，而且出了什么问题也很难被迅速解决。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于开源项目的选择，没有哪个最好的，你只有在综合评估的指标下，选择一个相对来说成熟并且适合你自己的就好了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML5新增的元素和移除的元素]]></title>
      <url>http://shenshanlaoyuan.com/2016/10/01/Web/HTML5%E6%96%B0%E5%A2%9E%E7%9A%84%E5%85%83%E7%B4%A0%E5%92%8C%E7%A7%BB%E9%99%A4%E7%9A%84%E5%85%83%E7%B4%A0/</url>
      <content type="html"><![CDATA[<p>为了更好地处理今天的互联网应用，HTML5添加了很多新元素及功能，比如: 图形的绘制，多媒体内容，更好的页面结构，更好的形式 处理，和几个api拖放元素，定位，包括网页 应用程序缓存，存储，网络工作者，等。</p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2016/10/01/Web/HTML5新增的元素和移除的元素/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2016/10/01/Web/HTML5新增的元素和移除的元素/'>HTML5新增的元素和移除的元素</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<h2 id="新元素"><a href="#新元素" class="headerlink" title="新元素"></a>新元素</h2><h3 id="新的语义和结构元素"><a href="#新的语义和结构元素" class="headerlink" title="新的语义和结构元素"></a>新的语义和结构元素</h3><table>
<thead>
<tr>
<th>元素</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;article&gt;</code></td>
<td>定义独立的内容，内容本身必须是有意义的且必须是独立于文档的其余部分。</td>
</tr>
<tr>
<td><code>&lt;aside&gt;</code></td>
<td>定义页面的侧边栏内容。</td>
</tr>
<tr>
<td><code>&lt;header&gt;</code></td>
<td>定义了文档的头部区域。</td>
</tr>
<tr>
<td><code>&lt;footer&gt;</code></td>
<td>定义文档或者文档的一部分区域的页脚。</td>
</tr>
<tr>
<td><code>&lt;section&gt;</code></td>
<td>定义了文档的某个区域。比如章节、头部、底部或者文档的其他区域。</td>
</tr>
<tr>
<td><code>&lt;time&gt;</code></td>
<td>定义公历的时间（24 小时制）或日期，时间和时区偏移是可选的。</td>
</tr>
<tr>
<td><code>&lt;details&gt;</code></td>
<td>规定了用户可见的或者隐藏的需求的补充细节。标签用来供用户开启关闭的交互式控件。任何形式的内容都能被放在 <code>&lt;details&gt;</code> 标签里边。元素的内容对用户是不可见的，除非设置了 open 属性。</td>
</tr>
<tr>
<td><code>&lt;bdi&gt;</code></td>
<td>标签允许您设置一段文本，使其脱离其父元素的文本方向设置。在发布用户评论或其他您无法完全控制的内容时，该标签很有用。</td>
</tr>
<tr>
<td><code>&lt;summary&gt;</code></td>
<td>标签为 <code>&lt;details&gt;</code>元素定义一个可见的标题。 当用户点击标题时会显示出详细信息。</td>
</tr>
<tr>
<td><code>&lt;command&gt;</code></td>
<td>定义命令按钮，比如单选按钮、复选框或按钮。</td>
</tr>
<tr>
<td><code>&lt;dialog&gt;</code></td>
<td>定义对话框，比如提示框。</td>
</tr>
<tr>
<td><code>&lt;figure&gt;</code></td>
<td>标签规定独立的流内容（图像、图表、照片、代码等等）。元素的内容应该与主内容相关，同时元素的位置相对于主内容是独立的。如果被删除，则不应对文档流产生影响。</td>
</tr>
<tr>
<td><code>&lt;figcaption&gt;</code></td>
<td>定义<code>&lt;figure&gt;</code>元素的标题</td>
</tr>
<tr>
<td><code>&lt;mark&gt;</code></td>
<td>定义带有记号的文本。</td>
</tr>
<tr>
<td><code>&lt;meter&gt;</code></td>
<td>标签定义度量衡。仅用于已知最大和最小值的度量。比如：磁盘使用情况，查询结果的相关性等。</td>
</tr>
<tr>
<td><code>&lt;nav&gt;</code></td>
<td>标签定义导航链接的部分。并不是所有的HTML文档都要使用到 <code>&lt;nav&gt;</code> 元素。<code>&lt;nav&gt;</code>元素只是作为标注一个导航链接的区域。</td>
</tr>
<tr>
<td><code>&lt;progress&gt;</code></td>
<td>标签定义运行中的任务进度（进程）。</td>
</tr>
<tr>
<td><code>&lt;rt&gt;</code></td>
<td>定义字符（中文注音或字符）的解释或发音。</td>
</tr>
</tbody>
</table>
<h3 id="新表单元素"><a href="#新表单元素" class="headerlink" title="新表单元素"></a>新表单元素</h3><table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;datalist&gt;</code></td>
<td>标签规定了 <code>&lt;input&gt;</code> 元素可能的选项列表。标签被用来在为 <code>&lt;input&gt;</code> 元素提供”自动完成”的特性。用户能看到一个下拉列表，里边的选项是预先定义好的，将作为用户的输入数据。</td>
</tr>
<tr>
<td><code>&lt;keygen&gt;</code></td>
<td>标签规定用于表单的密钥对生成器字段。当提交表单时，私钥存储在本地，公钥发送到服务器。</td>
</tr>
<tr>
<td><code>&lt;output&gt;</code></td>
<td>标签作为计算结果输出显示(比如执行脚本的输出)。</td>
</tr>
</tbody>
</table>
<h3 id="新多媒体元素"><a href="#新多媒体元素" class="headerlink" title="新多媒体元素"></a>新多媒体元素</h3><table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;audio&gt;</code></td>
<td>标签定义声音，比如音乐或其他音频流。<code>&lt;audio&gt;</code>元素支持的3种文件格式：MP3、Wav、Ogg。</td>
</tr>
<tr>
<td><code>&lt;video&gt;</code></td>
<td>标签定义视频，比如电影片段或其他视频流。目前，<code>&lt;video&gt;</code> 元素支持三种视频格式：MP4、WebM、Ogg。</td>
</tr>
<tr>
<td><code>&lt;source&gt;</code></td>
<td>标签为媒体元素（比如 <code>&lt;video&gt;</code>和 <code>&lt;audio&gt;</code>）定义媒体资源。</td>
</tr>
<tr>
<td><code>&lt;embed&gt;</code></td>
<td>标签定义了一个容器，用来嵌入外部应用或者互动程序（插件）。</td>
</tr>
<tr>
<td><code>&lt;track&gt;</code></td>
<td>标签为媒体元素（比如 <code>&lt;audio&gt;</code>and<code>&lt;video&gt;</code>）规定外部文本轨道。这个元素用于规定字幕文件或其他包含文本的文件，当媒体播放时，这些文件是可见的。</td>
</tr>
</tbody>
</table>
<h3 id="lt-canvas-gt-元素"><a href="#lt-canvas-gt-元素" class="headerlink" title="&lt;canvas&gt;元素"></a><code>&lt;canvas&gt;</code>元素</h3><p>标签通过脚本（通常是 JavaScript）来绘制图形（比如图表和其他图像）。<code>&lt;canvas&gt;</code>标签只是图形容器，必须使用脚本来绘制图形。</p>
<h3 id="移除的元素"><a href="#移除的元素" class="headerlink" title="移除的元素"></a>移除的元素</h3><ul>
<li><code>&lt;acronym&gt;</code></li>
<li><code>&lt;applet&gt;</code></li>
<li><code>&lt;basefont&gt;</code></li>
<li><code>&lt;big&gt;</code></li>
<li><code>&lt;center&gt;</code></li>
<li><code>&lt;dir&gt;</code></li>
<li><code>&lt;font&gt;</code></li>
<li><code>&lt;frame&gt;</code></li>
<li><code>&lt;frameset&gt;</code></li>
<li><code>&lt;noframes&gt;</code></li>
<li><code>&lt;strike&gt;</code></li>
<li><code>&lt;tt&gt;</code></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决GitHub Pages自有域名二级目录无法访问问题]]></title>
      <url>http://shenshanlaoyuan.com/2016/09/26/Hexo/%E8%A7%A3%E5%86%B3GitHub%20Pages%E8%87%AA%E6%9C%89%E5%9F%9F%E5%90%8D%E4%BA%8C%E7%BA%A7%E7%9B%AE%E5%BD%95%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>通常新建个项目，通过GitHub上创建gh-pages分支可以访问项目主页。然而我访问<code>usename.github.io/repo</code>,或者自定义域名 <code>yoursite.com/repo</code>    ，跳转到了 404 页面。</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>自己把博客同时放在 GitHub 和 Coding上，通过 DNS 做了不同线路解析，通过 CNAME 文件绑定了自己的自定义域名。GitHub 可以创建一个个人主页和多个项目主页，一般这样访问是没有问题。我的问题出现在域名解析这，默认线路设置为解析到 Coding 了，显然 Coding 上找不到  GitHub 创建的项目主页，就去博客目录下去找 <code>/repo</code> 目录，肯定找不到啦。</p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2016/09/26/Hexo/解决GitHub Pages自有域名二级目录无法访问问题/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2016/09/26/Hexo/解决GitHub Pages自有域名二级目录无法访问问题/'>解决GitHub Pages自有域名二级目录无法访问问题</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul>
<li>我这个问题在域名解析商DNSPAD把解析线路默认改为GitHub就可以了</li>
<li>也可以在 DNS解析增加一条 CNAME 记录，通过 <code>repo.yoursite.com</code> 访问</li>
<li>还可以把项目主页放到博客themes/themes-name/source目录下</li>
</ul>
<h3 id="有问题欢迎下面留言"><a href="#有问题欢迎下面留言" class="headerlink" title="有问题欢迎下面留言"></a>有问题欢迎下面留言</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[该重新学习下前端知识了]]></title>
      <url>http://shenshanlaoyuan.com/2016/09/24/%E9%9A%8F%E7%AC%94/%E8%AF%A5%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0%E4%B8%8B%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BA%86/</url>
      <content type="html"><![CDATA[<p>前几天微博朋友圈被微信小程序刷屏了。虽说现在只是内测，但微博Q群里都讨论炸了，可见微信对移动互联网影响多大。<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/cb105e8438ba4d5e9a7f8548906a93c2_th.jpg" alt=""></p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2016/09/24/随笔/该重新学习下前端知识了/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2016/09/24/随笔/该重新学习下前端知识了/'>该重新学习下前端知识了</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<h4 id="什么是微信小程序？"><a href="#什么是微信小程序？" class="headerlink" title="什么是微信小程序？"></a>什么是微信小程序？</h4><p>微信之父张小龙是这样说的：<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/10bf8aa779d949599ba775dbc29695e2.jpg" alt=""></p>
<h4 id="小程序会取代原生？"><a href="#小程序会取代原生？" class="headerlink" title="小程序会取代原生？"></a>小程序会取代原生？</h4><p>微博群里讨论的激烈，无非是担心自己会不会失业。小程序一经推出，各种预言家出来了，说App将被颠覆，原生已死。在我看来，远没到那个地步。就像H5刚出来的时候就有人说会取代原生应用，然后直到现在原生APP还活的好好的，就连目前大火的ReactNative还有很多不完善的地方。取代原生的开发不可能，毕竟有很多的APP在微信小程序还是有很多限制的，比如游戏，一些大型APP。不过也要开始学习下Javascript了，毕竟多学一项技能就会多一份竞争力，总会有好处的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Banner轮播图效果实现]]></title>
      <url>http://shenshanlaoyuan.com/2016/09/02/Android/Banner%E8%BD%AE%E6%92%AD%E5%9B%BE%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>项目中常常需要用到如下图的 Banner 广告轮播图的效果,利用 ViewPager 实现。</p>
<p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/GIF.gif" alt=""></p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2016/09/02/Android/Banner轮播图效果实现/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2016/09/02/Android/Banner轮播图效果实现/'>Banner轮播图效果实现</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.shenshanlaoyuan.viewpagertest.MainActivity"</span> &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"180dp"</span> &gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/pager"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"180dp"</span> &gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.v4.view.ViewPager</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#33000000"</span></div><div class="line">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">            <span class="attr">android:padding</span>=<span class="string">"5dp"</span> &gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/tv_title"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_gravity</span>=<span class="string">"center_horizontal"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"图片的title"</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"@android:color/white"</span> /&gt;</div><div class="line">            </div><div class="line">			<span class="comment">&lt;!-- 装圆点的容器 --&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/point_container"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_gravity</span>=<span class="string">"center_horizontal"</span></div><div class="line">                <span class="attr">android:layout_marginTop</span>=<span class="string">"5dp"</span></div><div class="line">                <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span> &gt;</div><div class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">            </div><div class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="圆点"><a href="#圆点" class="headerlink" title="圆点"></a>圆点</h4><p>资源目录 res 下新建 drawable 目录，创建两个圆点 shape 文件</p>
<p><code>point_normal.xml</code> 文件内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:shape</span>=<span class="string">"oval"</span> &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"5dp"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@android:color/white"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>point_selected.xml</code> 文件内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:shape</span>=<span class="string">"oval"</span> &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"5dip"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#ff0000"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.shenshanlaoyuan.viewpagertest;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v4.view.PagerAdapter;</div><div class="line"><span class="keyword">import</span> android.support.v4.view.ViewPager;</div><div class="line"><span class="keyword">import</span> android.support.v4.view.ViewPager.OnPageChangeListener;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.ViewGroup;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView.ScaleType;</div><div class="line"><span class="keyword">import</span> android.widget.LinearLayout;</div><div class="line"><span class="keyword">import</span> android.widget.LinearLayout.LayoutParams;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnPageChangeListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> ViewPager mPager;</div><div class="line">	<span class="keyword">private</span> LinearLayout mPointContainer;</div><div class="line">	<span class="keyword">private</span> List&lt;ImageView&gt; mListDatas;</div><div class="line">	<span class="keyword">private</span> TextView mTitle;</div><div class="line"></div><div class="line">	<span class="comment">//一般从网络获取数据，这里模拟本地获取数据,要在drawable目录添加五张图片</span></div><div class="line">	String[] titles = &#123; <span class="string">"第一个页面"</span>, <span class="string">"第二个页面"</span>, <span class="string">"第三个页面"</span>, <span class="string">"第四个页面"</span>, <span class="string">"第五个页面"</span> &#125;;</div><div class="line">	<span class="keyword">int</span>[] imgs = &#123; R.drawable.a, R.drawable.b, R.drawable.c, R.drawable.d,</div><div class="line">			R.drawable.e &#125;;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">		mPager = (ViewPager) findViewById(R.id.pager);</div><div class="line">		mPointContainer = (LinearLayout) findViewById(R.id.point_container);</div><div class="line">		mTitle = (TextView) findViewById(R.id.tv_title);</div><div class="line">		</div><div class="line">		<span class="comment">// 初始化数据</span></div><div class="line">		mListDatas = <span class="keyword">new</span> ArrayList&lt;ImageView&gt;();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; imgs.length; i++) &#123;</div><div class="line">			<span class="comment">// 给集合添加ImageView</span></div><div class="line">			ImageView iv = <span class="keyword">new</span> ImageView(<span class="keyword">this</span>);</div><div class="line">			iv.setImageResource(imgs[i]);</div><div class="line">			<span class="comment">//图片拉伸</span></div><div class="line">			iv.setScaleType(ScaleType.FIT_XY);</div><div class="line">			mListDatas.add(iv);</div><div class="line"></div><div class="line">			<span class="comment">// 添加圆点</span></div><div class="line">			View point = <span class="keyword">new</span> View(<span class="keyword">this</span>);</div><div class="line">			point.setBackgroundResource(R.drawable.point_normal);</div><div class="line">			LayoutParams params = <span class="keyword">new</span> LayoutParams(<span class="number">10</span>, <span class="number">10</span>);</div><div class="line">			<span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</div><div class="line">				params.leftMargin = <span class="number">10</span>;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				point.setBackgroundResource(R.drawable.point_selected);</div><div class="line">				mTitle.setText(titles[i]);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//向容器LinearLayout中添加圆点</span></div><div class="line">			mPointContainer.addView(point, params);</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 设置适配器</span></div><div class="line">		mPager.setAdapter(<span class="keyword">new</span> MyAdapter());</div><div class="line">		<span class="comment">// 设置监听器</span></div><div class="line">		mPager.addOnPageChangeListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 设置默认选中中间的item，实现循环轮播的效果</span></div><div class="line">		<span class="keyword">int</span> middle = Integer.MAX_VALUE / <span class="number">2</span>;</div><div class="line">		<span class="keyword">int</span> extra = middle % mListDatas.size();</div><div class="line">		<span class="keyword">int</span> item = middle - extra;</div><div class="line">		mPager.setCurrentItem(item);</div><div class="line">		</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">PagerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">// 页面的数量</span></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (mListDatas != <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">return</span> Integer.MAX_VALUE;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 标记方法，用来判断缓存标记</span></div><div class="line">		<span class="comment">// view:显示的view</span></div><div class="line">		<span class="comment">// object: 标记</span></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isViewFromObject</span><span class="params">(View view, Object object)</span> </span>&#123;</div><div class="line"></div><div class="line">			<span class="keyword">return</span> view == object;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 初始化item</span></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> Object <span class="title">instantiateItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">			position = position % mListDatas.size();</div><div class="line">			<span class="comment">// position： 要加载的位置</span></div><div class="line">			ImageView iv = mListDatas.get(position);</div><div class="line"></div><div class="line">			<span class="comment">// 用来添加要显示的View的</span></div><div class="line">			mPager.addView(iv);</div><div class="line"></div><div class="line">			<span class="comment">// 返回记录缓存标记</span></div><div class="line">			<span class="keyword">return</span> iv;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 销毁item条目</span></div><div class="line">		<span class="comment">// object:缓存标记</span></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</div><div class="line">			position = position % mListDatas.size();</div><div class="line">			ImageView iv = mListDatas.get(position);</div><div class="line">			mPager.removeView(iv);</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/************************************* ViewPager监听回调方法 *******************************************/</span></div><div class="line">	<span class="comment">// 回调方法,当viewpager的滑动状态改变时的回调</span></div><div class="line">	<span class="comment">// * @see ViewPager#SCROLL_STATE_IDLE : 闲置状态</span></div><div class="line">	<span class="comment">// * @see ViewPager#SCROLL_STATE_DRAGGING :拖动状态</span></div><div class="line">	<span class="comment">// * @see ViewPager#SCROLL_STATE_SETTLING: 固定状态</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 回调方法,当viewpager滚动时的回调</span></div><div class="line">	<span class="comment">// position: 当前选中的位置</span></div><div class="line">	<span class="comment">// positionOffset: 滑动的百分比</span></div><div class="line">	<span class="comment">// positionOffsetPixels: 偏移的距离,滑动的像素</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset,</span></span></div><div class="line">			<span class="keyword">int</span> positionOffsetPixels) &#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 回调方法,当viewpager的某个页面选中时的回调</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">		position = position % mListDatas.size();</div><div class="line"></div><div class="line">		<span class="comment">// 设置选中的点的样式</span></div><div class="line">		<span class="keyword">int</span> count = mPointContainer.getChildCount();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">			View view = mPointContainer.getChildAt(i);</div><div class="line"></div><div class="line">			view.setBackgroundResource(position == i ? R.drawable.point_selected</div><div class="line">					: R.drawable.point_normal);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 设置标题</span></div><div class="line">		mTitle.setText(titles[position]);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[dip(独立像素)和px(像素)之间转换]]></title>
      <url>http://shenshanlaoyuan.com/2016/06/15/Utils/dip(%E7%8B%AC%E7%AB%8B%E5%83%8F%E7%B4%A0)%E5%92%8Cpx(%E5%83%8F%E7%B4%A0)%E4%B9%8B%E9%97%B4%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<ul>
<li><strong>dip(dp):</strong> 与设备无关的像素，与“像素密度”密切相关，推荐使用</li>
<li><strong>px:</strong> 普通像素</li>
</ul>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2016/06/15/Utils/dip(独立像素)和px(像素)之间转换/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2016/06/15/Utils/dip(独立像素)和px(像素)之间转换/'>dip(独立像素)和px(像素)之间转换</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DensityUtil</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据手机的分辨率从 dip(独立像素) 的单位 转成为 px(像素)</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dip2px</span><span class="params">(Context context, <span class="keyword">float</span> dpValue)</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">float</span> scale = context.getResources().getDisplayMetrics().density;</div><div class="line">		<span class="keyword">return</span> (<span class="keyword">int</span>) (dpValue * scale + <span class="number">0.5f</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据手机的分辨率从 px(像素) 的单位 转成为 dp(dip)</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">px2dip</span><span class="params">(Context context, <span class="keyword">float</span> pxValue)</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">float</span> scale = context.getResources().getDisplayMetrics().density;</div><div class="line">		<span class="keyword">return</span> (<span class="keyword">int</span>) (pxValue / scale + <span class="number">0.5f</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[The type org.apache.http.HttpResponse cannot be resolved. It is indirectly referenced from required .class files]]></title>
      <url>http://shenshanlaoyuan.com/2016/06/13/Android/The%20type%20org.apache.http.HttpResponse%20cannot%20be%20resolved.%20It%20is%20indirectly%20referenced%20from%20required%20.class%20files/</url>
      <content type="html"><![CDATA[<p>在 Android 6.0（API 23）中，Google 已经移除了移除了Apache HttpClient 相关的类、HttpResponse 类。缺失jar包使用HttpResponse等会报错：<br><code>The type org.apache.http.HttpResponse cannot be resolved. It is indirectly referenced from required</code></p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2016/06/13/Android/The type org.apache.http.HttpResponse cannot be resolved. It is indirectly referenced from required .class files/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2016/06/13/Android/The type org.apache.http.HttpResponse cannot be resolved. It is indirectly referenced from required .class files/'>The type org.apache.http.HttpResponse cannot be resolved. It is indirectly referenced from required .class files</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取网络数据</span></div><div class="line">HttpUtils httpUtils = <span class="keyword">new</span> HttpUtils();</div><div class="line"><span class="comment">//发送URL请求  </span></div><div class="line">httpUtils.send(HttpMethod.GET, MyConstants.NEWSCENTERURL, <span class="keyword">new</span> RequestCallBack&lt;String&gt;() &#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(ResponseInfo&lt;String&gt; responseInfo)</span> </span>&#123;</div><div class="line">		<span class="comment">//访问数据成功</span></div><div class="line">		String jsonData = responseInfo.result;</div><div class="line">		System.out.println(jsonData);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(HttpException error, String msg)</span> </span>&#123;</div><div class="line">		<span class="comment">//访问数据失败</span></div><div class="line">		System.out.println(<span class="string">"网络请求数据失败："</span> + error);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>推荐使用HttpUrlConnection，如果要继续使用需要Apache  HttpClient，需要在eclipse下libs里添加org.apache.http.legacy.jar。添加方法如下：</p>
<ul>
<li>Eclipse中 在错误原因上点击ctrl+1，选择Configure build path，或者Project-&gt;Properties-&gt;Java Build Path-&gt;Libraries-&gt;Add Ecternal JARS-&gt;你的SDK目录的</li>
<li>android studio里在相应的module下的build.gradle中加入：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">useLibrary 'org.apache.http.legacy'</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MD5加密]]></title>
      <url>http://shenshanlaoyuan.com/2016/06/10/Utils/MD5%E5%8A%A0%E5%AF%86/</url>
      <content type="html"><![CDATA[<p>为了不让别人看直接看到保存的密码等信息，通常密码先采用MD5加密后再保存。MD5加密不可逆的，网上破解MD5方法原理是，拿MD5加密后的数据去他们亿万级的数据库去匹配。要防止别人破解可以用加密后数据再MD5加密几次，像银行保存的密码信息至少加密十次以上。</p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2016/06/10/Utils/MD5加密/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2016/06/10/Utils/MD5加密/'>MD5加密</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<p>下图是某破解网站能破解的数据，也只能破解三次加密，而且还是收费，所以担心破解可以多加密几次。<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/QQ%E5%9B%BE%E7%89%8720160827191553.png" alt=""></p>
<p><strong>MD5加密工具类：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Md5Utils</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">md5</span><span class="params">(String str)</span></span>&#123;</div><div class="line">		StringBuilder mess = <span class="keyword">new</span> StringBuilder();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//获取MD5加密器</span></div><div class="line">			MessageDigest md = MessageDigest.getInstance(<span class="string">"MD5"</span>);</div><div class="line">			<span class="keyword">byte</span>[] bytes = str.getBytes();</div><div class="line">			<span class="keyword">byte</span>[] digest = md.digest(bytes);</div><div class="line">			</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">byte</span> b : digest)&#123;</div><div class="line">				<span class="comment">//把每个字节转成16进制数  </span></div><div class="line">				<span class="keyword">int</span> d = b &amp; <span class="number">0xff</span>;<span class="comment">// 0x000000ff</span></div><div class="line">				String hexString = Integer.toHexString(d);</div><div class="line">				<span class="keyword">if</span> (hexString.length() == <span class="number">1</span>) &#123;<span class="comment">//字节的高4位为0</span></div><div class="line">					hexString = <span class="string">"0"</span> + hexString;</div><div class="line">				&#125;</div><div class="line">				mess.append(hexString);<span class="comment">//把每个字节对应的2位十六进制数当成字符串拼接一起</span></div><div class="line">				</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> mess + <span class="string">""</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[最爱听民谣]]></title>
      <url>http://shenshanlaoyuan.com/2016/06/03/%E9%9A%8F%E7%AC%94/%E6%9C%80%E7%88%B1%E5%90%AC%E6%B0%91%E8%B0%A3/</url>
      <content type="html"><![CDATA[<p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/thumb.jpg" alt=""></p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2016/06/03/随笔/最爱听民谣/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2016/06/03/随笔/最爱听民谣/'>最爱听民谣</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="450" src="http://music.163.com/outchain/player?type=0&id=325242758&auto=1&height=430"></iframe>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前面些文章写的有点水了]]></title>
      <url>http://shenshanlaoyuan.com/2016/06/02/%E9%9A%8F%E7%AC%94/%E5%89%8D%E9%9D%A2%E4%BA%9B%E6%96%87%E7%AB%A0%E5%86%99%E7%9A%84%E6%9C%89%E7%82%B9%E6%B0%B4%E4%BA%86/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">因为是第一次写博客，可能前面些文章技术含量很低，后面尽量多写点有质量的文章。</blockquote>

<p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/5.jpg" alt="坚持"></p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2016/06/02/随笔/前面些文章写的有点水了/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2016/06/02/随笔/前面些文章写的有点水了/'>前面些文章写的有点水了</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<p>以前语文作文很少及格，所以文笔太差了，见谅，呵呵。不过我相信多写写就会好些。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="http://music.163.com/outchain/player?type=2&id=307714&auto=1&height=32"></iframe>

<p><strong>我为什么写博客？</strong><br>一直记得原来的语文老师说的那句，“好记性不如烂笔头”。确实是这样，以前学的东西现在好多都忘记了，多写写文章能加深印象。还有就是，比如现在正在学某些知识，写不出来也证明脑子里面没有记忆，也就是没学进去。所以以后一定要多把工作学习中的知识整理下写出来。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Dialog]]></title>
      <url>http://shenshanlaoyuan.com/2016/05/23/Android/Dialog/</url>
      <content type="html"><![CDATA[<p>几种常见的对话框使用。</p>
<h2 id="确认取消对话框"><a href="#确认取消对话框" class="headerlink" title="确认取消对话框"></a>确认取消对话框</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">      AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">builder.setTitle(<span class="string">"约会把..."</span>);</div><div class="line">builder.setMessage(<span class="string">"告别单身, 你愿意吗 ?"</span>);</div><div class="line"></div><div class="line">builder.setPositiveButton(<span class="string">"愿意,gogogo"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">		Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"我也单身, 说不定 可以 来找我..."</span>, <span class="number">0</span>).show();</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">builder.setNegativeButton(<span class="string">"不愿意"</span>, <span class="keyword">null</span> );</div><div class="line">builder.show();</div></pre></td></tr></table></figure>
<p>显示效果：<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/QQ%E5%9B%BE%E7%89%8720160523140827.png" alt=""></p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2016/05/23/Android/Dialog/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2016/05/23/Android/Dialog/'>Dialog</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<h2 id="单选对话框"><a href="#单选对话框" class="headerlink" title="单选对话框"></a>单选对话框</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>);</div><div class="line">builder.setTitle(<span class="string">"单选对话框 "</span>);</div><div class="line"><span class="keyword">final</span> String[] items = &#123; <span class="string">"小丽"</span>, <span class="string">"小红"</span>, <span class="string">"小芳"</span> &#125;;</div><div class="line">builder.setSingleChoiceItems(items, -<span class="number">1</span>,</div><div class="line">		<span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line"></div><div class="line">				Toast.makeText(MainActivity.<span class="keyword">this</span>,</div><div class="line">						<span class="string">" 被点击了 : "</span> + items[which] + <span class="string">",位置: "</span> + which, <span class="number">0</span>)</div><div class="line">						.show();</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">builder.show();</div></pre></td></tr></table></figure>
<p>效果：<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/QQ%E5%9B%BE%E7%89%8720160523140902.png" alt=""></p>
<h2 id="多选对话框"><a href="#多选对话框" class="headerlink" title="多选对话框"></a>多选对话框</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>);</div><div class="line">builder.setTitle(<span class="string">"多选"</span>);</div><div class="line"><span class="keyword">final</span> String[] items = &#123; <span class="string">"android"</span>, <span class="string">"ios"</span>, <span class="string">"javaee"</span>, <span class="string">"php"</span>, <span class="string">"C++"</span> &#125;;</div><div class="line"><span class="keyword">boolean</span>[] checkedItems = &#123; <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span> &#125;;</div><div class="line"></div><div class="line">builder.setMultiChoiceItems(items, checkedItems,</div><div class="line">		<span class="keyword">new</span> DialogInterface.OnMultiChoiceClickListener() &#123;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which,</span></span></div><div class="line">					<span class="keyword">boolean</span> isChecked) &#123;</div><div class="line">				Toast.makeText(</div><div class="line">						MainActivity.<span class="keyword">this</span>,</div><div class="line">						<span class="string">" 被点击了 : "</span> + items[which] + <span class="string">",位置: "</span> + which</div><div class="line">								+ <span class="string">", 值是: "</span> + isChecked, <span class="number">0</span>).show();</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line"></div><div class="line">builder.show();</div></pre></td></tr></table></figure>
<p>显示效果：<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/QQ%E5%9B%BE%E7%89%8720160523141750.png" alt=""></p>
<h2 id="进度对话框"><a href="#进度对话框" class="headerlink" title="进度对话框"></a>进度对话框</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">      ProgressDialog pd = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</div><div class="line"><span class="comment">// 设置对话框的标题</span></div><div class="line">pd.setTitle(<span class="string">"任务正在执行中"</span>);</div><div class="line"><span class="comment">// 设置对话框显示的内容</span></div><div class="line">pd.setMessage(<span class="string">"任务正在执行中，敬请等待..."</span>);</div><div class="line"><span class="comment">// 设置对话框能用“取消”按钮关闭</span></div><div class="line">pd.setCancelable(<span class="keyword">true</span>);</div><div class="line"><span class="comment">// 设置对话框的进度条风格</span></div><div class="line">pd.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);</div><div class="line"><span class="comment">// 设置对话框的进度条是否显示进度</span></div><div class="line">pd.setIndeterminate(<span class="keyword">true</span>);</div><div class="line">pd.show();</div></pre></td></tr></table></figure>
<p>显示效果：<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/QQ%E5%9B%BE%E7%89%8720160523145614.png" alt=""></p>
<h2 id="进度对话框带-进度条的"><a href="#进度对话框带-进度条的" class="headerlink" title="进度对话框带-进度条的"></a>进度对话框带-进度条的</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> ProgressDialog progress = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</div><div class="line">progress.setMessage(<span class="string">"正在下载中。。。"</span>);</div><div class="line">progress.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);</div><div class="line"><span class="comment">// progress.setIndeterminate(true);</span></div><div class="line">progress.show();</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> totalProgressTime = <span class="number">100</span>;</div><div class="line"></div><div class="line"><span class="keyword">final</span> Thread t = <span class="keyword">new</span> Thread() &#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">int</span> jumpTime = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span> (jumpTime &lt; totalProgressTime) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				sleep(<span class="number">200</span>);</div><div class="line">				jumpTime += <span class="number">5</span>;</div><div class="line">				progress.setProgress(jumpTime);</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line">t.start();</div></pre></td></tr></table></figure>
<p>显示效果：<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/QQ%E5%9B%BE%E7%89%8720160523150948.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android下的数据存储与访问方式（三）]]></title>
      <url>http://shenshanlaoyuan.com/2016/05/21/Android/Android%E4%B8%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%96%B9%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>更多方式阅读上两篇文章：<br><a href="http://shenshanlaoyuan.com/2016/05/13/android/Android%E4%B8%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%96%B9%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/">Android下的数据存储与访问方式（一）</a><br><a href="http://shenshanlaoyuan.com/2016/05/14/android/Android%E4%B8%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%96%B9%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89/">Android下的数据存储与访问方式（二）</a></p>
<h2 id="SQLite-轻量级数据库"><a href="#SQLite-轻量级数据库" class="headerlink" title="SQLite 轻量级数据库"></a>SQLite 轻量级数据库</h2><p>SQLite，是一款轻型的数据库，是遵守ACID(原子性、一致性、隔离性、持久性)的关联式数据库管理系统，多用于嵌入式开发中。</p>
<p>SQLite的数据类型：Typelessness(无类型), 可以保存任何类型的数据到你所想要保存的任何表的任何列中. 但它又支持常见的类型比如: NULL, VARCHAR, TEXT, INTEGER, BLOB, CLOB…等. 唯一的例外：integer primary key 此字段只能存储64位整数。</p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2016/05/21/Android/Android下的数据存储与访问方式（三）/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2016/05/21/Android/Android下的数据存储与访问方式（三）/'>Android下的数据存储与访问方式（三）</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<p>在Android系统，提供了一个SQLiteOpenHelper抽象类，该类用于对数据库版本进行管理.该类中常用的方法:</p>
<ul>
<li>onCreate 数据库创建时执行(第一次连接获取数据库对象时执行)</li>
<li>onUpgrade 数据库更新时执行(版本号改变时执行)</li>
<li>onOpen 数据库每次打开时执行(每次打开数据库时调用，在                onCreate，onUpgrade方法之后)</li>
</ul>
<h3 id="使用SQLiteDatabase操作SQLite数据库"><a href="#使用SQLiteDatabase操作SQLite数据库" class="headerlink" title="使用SQLiteDatabase操作SQLite数据库"></a>使用SQLiteDatabase操作SQLite数据库</h3><p>Android提供了一个名为SQLiteDatabase的类，该类封装了一些操作数据库的API，使用该类可以完成对数据进行添加(Create)、查询(Retrieve)、更新(Update)和删除(Delete)操作（这些操作简称为CRUD）。</p>
<p>对SQLiteDatabase的学习，我们应该重点掌握execSQL()和rawQuery()方法。 execSQL()方法可以执行insert、delete、update和CREATE TABLE之类有更改行为的SQL语句； rawQuery()方法用于执行select语句。</p>
<p>1.execSQL()方法的使用例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MySqliteHelper helper = <span class="keyword">new</span> MySqliteHelper();</div><div class="line">SQLiteDatabase db = helper.getWritableDatabase();</div><div class="line">db.execSQL(<span class="string">"insert into person(name, age) values('张三', 4)"</span>);</div><div class="line">db.close();</div></pre></td></tr></table></figure>
<p>执行上面SQL语句会往person表中添加进一条记录，在实际应用中， 语句中的“张三”这些参数值会由用户输入界面提供，如果把用户输入的内容原样组拼到上面的insert语句， 当用户输入的内容含有单引号时，组拼出来的SQL语句就会存在语法错误。要解决这个问题需要对单引号进行转义，也就是把单引号转换成两个单引号。有些时候用户往往还会输入像“ &amp; ”这些特殊SQL符号，为保证组拼好的SQL语句语法正确，必须对SQL语句中的这些特殊SQL符号都进行转义，显然，对每条SQL语句都做这样的处理工作是比较烦琐的。 SQLiteDatabase类提供了一个重载后的execSQL(String sql, Object[] bindArgs)方法，使用这个方法可以解决前面提到的问题，因为这个方法支持使用占位符参数(?)。使用例子如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MySqliteHelper helper = <span class="keyword">new</span> MySqliteHelper();</div><div class="line">SQLiteDatabase db = helper.getWritableDatabase();</div><div class="line">db.execSQL(<span class="string">"insert into person(name, age) values(?,?)"</span>, <span class="keyword">new</span> Object[]&#123;<span class="string">"张三"</span>, <span class="number">4</span>&#125;); </div><div class="line">db.close();</div></pre></td></tr></table></figure></p>
<p>execSQL(String sql, Object[] bindArgs)方法的第一个参数为SQL语句，第二个参数为SQL语句中占位符参数的值，参数值在数组中的顺序要和占位符的位置对应。</p>
<p>2.SQLiteDatabase的rawQuery() 用于执行select语句，使用例子如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">MySqliteHelper helper = <span class="keyword">new</span> MySqliteHelper();</div><div class="line">SQLiteDatabase db = helper.getReadableDatabase();</div><div class="line">Cursor cursor = db.rawQuery(“select * from person”, <span class="keyword">null</span>);</div><div class="line"><span class="keyword">while</span> (cursor.moveToNext()) &#123;</div><div class="line">	<span class="keyword">int</span> personid = cursor.getInt(<span class="number">0</span>); <span class="comment">//获取第一列的值,第一列的索引从0开始</span></div><div class="line">	String name = cursor.getString(<span class="number">1</span>);<span class="comment">//获取第二列的值</span></div><div class="line">	<span class="keyword">int</span> age = cursor.getInt(<span class="number">2</span>);<span class="comment">//获取第三列的值</span></div><div class="line">&#125;</div><div class="line">cursor.close();</div><div class="line">db.close();</div></pre></td></tr></table></figure>
<p>rawQuery()方法的第一个参数为select语句；第二个参数为select语句中占位符参数的值，如果select语句没有使用占位符，该参数可以设置为null。</p>
<p>带占位符参数的select语句使用例子如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Cursor cursor = db.rawQuery(<span class="string">"select * from person where name like ? and age=?"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"%张%"</span>, <span class="string">"4"</span>&#125;);</div></pre></td></tr></table></figure></p>
<p>Cursor是结果集游标，用于对结果集进行随机访问，如果熟悉jdbc， 其实Cursor与JDBC中的ResultSet作用很相似。使用moveToNext()方法可以将游标从当前行移动到下一行，如果已经移过了结果集的最后一行，返回结果为false，否则为true。另外Cursor 还有常用的moveToPrevious()方法（用于将游标从当前行移动到上一行，如果已经移过了结果集的第一行，返回值为false，否则为true ）、moveToFirst()方法（用于将游标移动到结果集的第一行，如果结果集为空，返回值为false，否则为true ）和moveToLast()方法（用于将游标移动到结果集的最后一行，如果结果集为空，返回值为false，否则为true ） 。</p>
<p>除了execSQL()和rawQuery()方法, SQLiteDatabase还专门提供了对应于添加、删除、更新、查询的操作方法： </p>
<ul>
<li>insert()        增加数据</li>
<li>delete()        删除数据</li>
<li>update()    修改数据</li>
<li><p>query()        查询数据</p>
<p>这些方法实际上是给那些不太了解SQL语法的开发者使用的，对于熟悉SQL语法的程序员而言，直接使用execSQL()和rawQuery()方法执行SQL语句就能完成数据的添加、删除、更新、查询操作。</p>
</li>
</ul>
<h3 id="使用事务操作SQLite数据库"><a href="#使用事务操作SQLite数据库" class="headerlink" title="使用事务操作SQLite数据库"></a>使用事务操作SQLite数据库</h3><p>使用SQLiteDatabase的beginTransaction()方法可以开启一个事务，程序执行到endTransaction() 方法时会检查事务的标志是否为成功，如果程序执行到endTransaction()之前调用了setTransactionSuccessful() 方法设置事务的标志为成功则提交事务，如果没有调用setTransactionSuccessful() 方法则回滚事务。使用例子如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">SQLiteDatabase db = ....;</div><div class="line">db.beginTransaction();<span class="comment">//开始事务</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    db.execSQL(<span class="string">"insert into person(name, age) values(?,?)"</span>, <span class="keyword">new</span> Object[]&#123;<span class="string">"张三"</span>, <span class="number">4</span>&#125;);</div><div class="line">    db.execSQL(<span class="string">"update person set name=? where personid=?"</span>, <span class="keyword">new</span> Object[]&#123;<span class="string">"李四"</span>, <span class="number">1</span>&#125;);</div><div class="line">    db.setTransactionSuccessful();<span class="comment">//调用此方法会在执行到endTransaction() 时提交当前事务，如果不调用此方法会回滚事务</span></div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">    db.endTransaction();<span class="comment">//由事务的标志决定是提交事务，还是回滚事务</span></div><div class="line">&#125; </div><div class="line">db.close();</div></pre></td></tr></table></figure></p>
<p>上面两条SQL语句在同一个事务中执行。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[博客添加Fork me on GitHub]]></title>
      <url>http://shenshanlaoyuan.com/2016/05/20/Hexo/%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Fork%20me%20on%20GitHub/</url>
      <content type="html"><![CDATA[<p>效果如下所示：<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/QQ%E5%9B%BE%E7%89%8720160520110717.png" alt=""></p>
<a id="more"></a> <span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2016/05/20/Hexo/博客添加Fork me on GitHub/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2016/05/20/Hexo/博客添加Fork me on GitHub/'>博客添加Fork me on GitHub</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<ol>
<li>去网址<a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="external">https://github.com/blog/273-github-ribbons</a>挑选自己喜欢的样式，并复制代码。</li>
<li>修改主题文件。以我用的next主题为例,粘贴刚才复制的代码到<code>themes/next/layout/_layout.swig</code>文件中，修改后的的文件内容如下<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/QQ%E5%9B%BE%E7%89%8720160520111944.png" alt=""></li>
<li>再把其中的链接地址改为你的github地址。如上图修改红框中地址。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[XML文件的生成与解析]]></title>
      <url>http://shenshanlaoyuan.com/2016/05/16/Android/XML%E6%96%87%E4%BB%B6%E7%9A%84%E7%94%9F%E6%88%90%E4%B8%8E%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>我们知道SharedPreference背后是用XMl文件进行数据存储的，那么Android下是如何生成XMl文件，如何解析XML文件的呢？</p>
<a id="more"></a> <span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2016/05/16/Android/XML文件的生成与解析/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2016/05/16/Android/XML文件的生成与解析/'>XML文件的生成与解析</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<h2 id="生成XML文件"><a href="#生成XML文件" class="headerlink" title="生成XML文件"></a>生成XML文件</h2><h3 id="原始拼接的方法"><a href="#原始拼接的方法" class="headerlink" title="原始拼接的方法"></a>原始拼接的方法</h3><p>假如要生成如下内容的XML文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">number</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">number</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">sex</span>&gt;</span>男<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>那么拼接方式的代码实现如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">         File file = <span class="keyword">new</span> File(getFilesDir(),<span class="string">"张三.xml"</span>);</div><div class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">sb.append(<span class="string">"&lt;?xml version='1.0' encoding='utf-8'?&gt;"</span>);</div><div class="line">sb.append(<span class="string">"&lt;student&gt;"</span>);</div><div class="line">sb.append(<span class="string">"&lt;name&gt;"</span>);</div><div class="line">sb.append(<span class="string">"张三"</span>);</div><div class="line">sb.append(<span class="string">"&lt;/name&gt;"</span>);</div><div class="line">sb.append(<span class="string">"&lt;number&gt;"</span>);</div><div class="line">sb.append(<span class="string">"123456"</span>);</div><div class="line">sb.append(<span class="string">"&lt;/number&gt;"</span>);</div><div class="line">sb.append(<span class="string">"&lt;sex&gt;"</span>);</div><div class="line">sb.append(<span class="string">"男"</span>);</div><div class="line">sb.append(<span class="string">"&lt;/sex&gt;"</span>);</div><div class="line">sb.append(<span class="string">"&lt;/student&gt;"</span>);</div><div class="line">OutputStream out = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">out.write(sb.toString().getBytes());</div><div class="line">out.close();</div></pre></td></tr></table></figure></p>
<h3 id="使用序列化器Serializer"><a href="#使用序列化器Serializer" class="headerlink" title="使用序列化器Serializer"></a>使用序列化器Serializer</h3><p>如果XMl文件内接收的内容含有特殊字符，使用Serializer就不需要手动做判断转义了，自动帮我们完成了转义。</p>
<p>使用Serializer生成XMl代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">         File file = <span class="keyword">new</span> File(getFilesDir(),<span class="string">"张三.xml"</span>);</div><div class="line">OutputStream out = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">	</div><div class="line"><span class="comment">// 专门生成xml 文件的 序列化器  </span></div><div class="line">XmlSerializer serializer = Xml.newSerializer();</div><div class="line">serializer.setOutput(out, <span class="string">"UTF-8"</span>);</div><div class="line"></div><div class="line"><span class="comment">//   &lt;?xml version="1.0" encoding="utf-8" standalone?&gt;</span></div><div class="line">serializer.startDocument(<span class="string">"UTF-8"</span>, <span class="keyword">true</span>);</div><div class="line"></div><div class="line">serializer.startTag(<span class="keyword">null</span>, <span class="string">"student"</span>);</div><div class="line"></div><div class="line">serializer.startTag(<span class="keyword">null</span>, <span class="string">"name"</span>);</div><div class="line">serializer.text(<span class="string">"张三"</span>);</div><div class="line">serializer.endTag(<span class="keyword">null</span>, <span class="string">"name"</span>);</div><div class="line"></div><div class="line">serializer.startTag(<span class="keyword">null</span>, <span class="string">"number"</span>);</div><div class="line">serializer.text(<span class="string">"123456"</span>);</div><div class="line">serializer.endTag(<span class="keyword">null</span>, <span class="string">"number"</span>);</div><div class="line"></div><div class="line">serializer.startTag(<span class="keyword">null</span>, <span class="string">"sex"</span>);</div><div class="line">serializer.text(<span class="string">"男"</span>);</div><div class="line">serializer.endTag(<span class="keyword">null</span>, <span class="string">"sex"</span>);</div><div class="line">serializer.endTag(<span class="keyword">null</span>, <span class="string">"student"</span>);</div><div class="line">serializer.endDocument();</div><div class="line"></div><div class="line">out.close();</div></pre></td></tr></table></figure></p>
<h2 id="解析生成的XML文件"><a href="#解析生成的XML文件" class="headerlink" title="解析生成的XML文件"></a>解析生成的XML文件</h2><p>Android下使用的是Pull解析器,基于事件的。</p>
<p>假如下面是要解析的XML文件：</p>
<p>文件名称：persons.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">persons</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">person</span> <span class="attr">id</span>=<span class="string">“18</span>"&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>allen<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">age</span>&gt;</span>36<span class="tag">&lt;/<span class="name">age</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">person</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">person</span> <span class="attr">id</span>=<span class="string">“28</span>"&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>james<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">age</span>&gt;</span>25<span class="tag">&lt;/<span class="name">age</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">person</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">persons</span>&gt;</span>!</div></pre></td></tr></table></figure></p>
<p>定义了一个java bean用于存放上面解析出来的xml内容， 这个java bean为Person，代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Integer id;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> Short age;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Short <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Short age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用Pull解析器解析，解析出来的内容通过List集合返回<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> List&lt;Person&gt; <span class="title">parserXmlFromLocal</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		File path = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), <span class="string">"persons.xml"</span>);    <span class="comment">//从SD卡中读取xml文件</span></div><div class="line">		FileInputStream fis = <span class="keyword">new</span> FileInputStream(path);</div><div class="line">		</div><div class="line">		<span class="comment">// 获得pull解析器对象</span></div><div class="line">		XmlPullParser parser = Xml.newPullParser();</div><div class="line">		<span class="comment">// 指定解析的文件和编码格式</span></div><div class="line">		parser.setInput(fis, <span class="string">"utf-8"</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> eventType = parser.getEventType(); 		<span class="comment">// 获得事件类型</span></div><div class="line">		</div><div class="line">		List&lt;Person&gt; personList = <span class="keyword">null</span>;</div><div class="line">		Person person = <span class="keyword">null</span>;</div><div class="line">		String id;</div><div class="line">		<span class="keyword">while</span>(eventType != XmlPullParser.END_DOCUMENT) &#123;</div><div class="line">			String tagName = parser.getName();	<span class="comment">// 获得当前节点的名称</span></div><div class="line">			</div><div class="line">			<span class="keyword">switch</span> (eventType) &#123;</div><div class="line">			<span class="keyword">case</span> XmlPullParser.START_TAG: 		<span class="comment">// 当前等于开始节点  &lt;person&gt;</span></div><div class="line">				<span class="keyword">if</span>(<span class="string">"persons"</span>.equals(tagName)) &#123;	<span class="comment">// &lt;persons&gt;</span></div><div class="line">					personList = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"person"</span>.equals(tagName)) &#123; <span class="comment">// &lt;person id="1"&gt;</span></div><div class="line">					person = <span class="keyword">new</span> Person();</div><div class="line">					id = parser.getAttributeValue(<span class="keyword">null</span>, <span class="string">"id"</span>);</div><div class="line">					person.setId(Integer.valueOf(id));</div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"name"</span>.equals(tagName)) &#123; <span class="comment">// &lt;name&gt;</span></div><div class="line">					person.setName(parser.nextText());</div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"age"</span>.equals(tagName)) &#123; <span class="comment">// &lt;age&gt;</span></div><div class="line">					person.setAge(Integer.parseInt(parser.nextText()));</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> XmlPullParser.END_TAG:		<span class="comment">// &lt;/persons&gt;</span></div><div class="line">				<span class="keyword">if</span>(<span class="string">"person"</span>.equals(tagName)) &#123;</div><div class="line">					<span class="comment">// 需要把上面设置好值的person对象添加到集合中</span></div><div class="line">					personList.add(person);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">default</span>:</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			eventType = parser.next();		<span class="comment">// 获得下一个事件类型</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> personList;</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android下的数据存储与访问方式（二）]]></title>
      <url>http://shenshanlaoyuan.com/2016/05/14/Android/Android%E4%B8%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%96%B9%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>Android为数据存储提供了如下几种方式：<br>1.文件 2.SharedPreferences 3.SQLite 4.网络 5.ContentProvider</p>
<p>文件方式请阅读上一篇文章<br><a href="http://shenshanlaoyuan.com/2016/05/13/android/Android%E4%B8%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%96%B9%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/">Android下的数据存储与访问方式（一）</a></p>
<h2 id="SharedPreferences"><a href="#SharedPreferences" class="headerlink" title="SharedPreferences"></a>SharedPreferences</h2><p>很多时候我们开发的软件需要向用户提供软件参数设置功能，例如我们常用的QQ，用户可以设置是否允许陌生人添加自己为好友，设置字体的大小等等。对于软件配置参数的保存，如果是window软件通常我们会采用ini文件进行保存，如果是j2se应用，我们会采用properties属性文件或者xml进行保存。</p>
<p>如果是Android应用，我们最适合采用什么方式保存软件配置参数呢？</p>
<p>Android平台给我们提供了一个SharedPreferences类，它是一个轻量级的存储类，特别适合用于<strong>保存软件配置参数</strong>。</p>
<a id="more"></a> <span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2016/05/14/Android/Android下的数据存储与访问方式（二）/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2016/05/14/Android/Android下的数据存储与访问方式（二）/'>Android下的数据存储与访问方式（二）</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<p>使用SharedPreferences保存数据，其背后是用xml文件存放数据，文件存放在<code>/data/data/&lt;package name&gt;/shared_prefs</code>目录下</p>
<h3 id="使用SharedPreferences保存数据"><a href="#使用SharedPreferences保存数据" class="headerlink" title="使用SharedPreferences保存数据"></a>使用SharedPreferences保存数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SharedPreferences sp = getSharedPreferences(<span class="string">"config"</span>, Context.MODE_PRIVATE);</div><div class="line">Editor editor = sp.edit();</div><div class="line">editor.putString(<span class="string">"number"</span>, number);</div><div class="line">editor.putString(<span class="string">"password"</span>, password);</div><div class="line">editor.commit();</div></pre></td></tr></table></figure>
<p>生成的config.xml文件中内容如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version='1.0' encoding='utf-8' standalone='yes' ?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"number"</span>&gt;</span>1395545452415<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>4545872<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>因为SharedPreferences背后是使用xml文件保存数据，getSharedPreferences(name,mode)方法的第一个参数用于指定该文件的名称，名称不用带后缀，后缀会由Android自动加上。方法的第二个参数指定文件的操作模式，共有四种操作模式，<br>这四种模式为</p>
<ul>
<li>Context.MODE_PRIVATE：为默认操作模式，代表该文件是私有数据，只能被应用本身访问，在该模式下，写入的内容会覆盖原文件的内容，如果想把新写入的内容追加到原文件中。可以使用Context.MODE_APPEND</li>
<li>Context.MODE_APPEND：模式会检查文件是否存在，存在就往文件追加内容，否则就创建新文件。Context.MODE_WORLD_READABLE和Context.MODE_WORLD_WRITEABLE用来控制其他应用是否有权限读写该文件。</li>
<li>MODE_WORLD_READABLE：表示当前文件可以被其他应用读取；</li>
<li>MODE_WORLD_WRITEABLE：表示当前文件可以被其他应用写入。</li>
</ul>
<p>如果希望SharedPreferences背后使用的xml文件能被其他应用读和写，可以指定<code>Context.MODE_WORLD_READABLE</code>和<code>Context.MODE_WORLD_WRITEABLE</code>权限。</p>
<p>另外Activity还提供了另一个getPreferences(mode)方法操作SharedPreferences，这个方法默认使用当前类不带包名的类名作为文件的名称。</p>
<h3 id="读取SharedPreferences保存的数据"><a href="#读取SharedPreferences保存的数据" class="headerlink" title="读取SharedPreferences保存的数据"></a>读取SharedPreferences保存的数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> SharedPreferences sp = getSharedPreferences(<span class="string">"config"</span>, Context.MODE_PRIVATE);</div><div class="line"> </div><div class="line"> <span class="comment">// 如果找到了number的值,那么就返回number的值, 否则 就返回这里的默认值 </span></div><div class="line">String number= sp.getString(<span class="string">"number"</span>, <span class="string">""</span>);</div><div class="line">String password= sp.getString(<span class="string">"password"</span>, <span class="string">""</span>);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android下的数据存储与访问方式（一）]]></title>
      <url>http://shenshanlaoyuan.com/2016/05/13/Android/Android%E4%B8%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%96%B9%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>很多时候我们的软件需要对处理后的数据进行存储或再次访问。<br>Android为数据存储提供了如下几种方式：</p>
<ul>
<li>文件</li>
<li>SharedPreferences</li>
<li>SQLite</li>
<li>网络</li>
<li>ContentProvider</li>
</ul>
<a id="more"></a> <span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2016/05/13/Android/Android下的数据存储与访问方式（一）/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2016/05/13/Android/Android下的数据存储与访问方式（一）/'>Android下的数据存储与访问方式（一）</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>

<h1 id="文件的方式"><a href="#文件的方式" class="headerlink" title="文件的方式"></a>文件的方式</h1><h2 id="将数据文件保存到应用程序中"><a href="#将数据文件保存到应用程序中" class="headerlink" title="将数据文件保存到应用程序中"></a>将数据文件保存到应用程序中</h2><p>用模拟QQ登录保存帐号和密码做个简单的例子<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/QQ%E5%9B%BE%E7%89%8720160513192832.jpg" alt=""></p>
<p>简单的写了下QQ登录界面布局，如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.shenshanlaoyuan.qqlogin.MainActivity"</span> &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span> </span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/qq"</span>/&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">EditText</span> </span></div><div class="line">	    <span class="attr">android:id</span>=<span class="string">"@+id/qqnumber"</span></div><div class="line">	    <span class="attr">android:hint</span>=<span class="string">"QQ号/手机号/邮箱"</span></div><div class="line">	     <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">	    /&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">EditText</span> </span></div><div class="line">	    <span class="attr">android:id</span>=<span class="string">"@+id/qqpassword"</span></div><div class="line">	    <span class="attr">android:hint</span>=<span class="string">"密码"</span></div><div class="line">	    <span class="attr">android:inputType</span>=<span class="string">"textPassword"</span></div><div class="line">	     <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">	    /&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">CheckBox</span></span></div><div class="line">	    <span class="attr">android:id</span>=<span class="string">"@+id/remember"</span></div><div class="line">	    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></div><div class="line">	    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">	    <span class="attr">android:text</span>=<span class="string">"记住用户名和密码"</span> /&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">	    <span class="attr">android:onClick</span>=<span class="string">"login"</span></div><div class="line">	    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></div><div class="line">	    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">	    <span class="attr">android:text</span>=<span class="string">"登录"</span> </div><div class="line">	    <span class="attr">android:background</span>=<span class="string">"#03a9f4"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>点击登录按钮就会把帐号和密码保存到应用程序的file文件夹下，代码实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">ActionBarActivity</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> EditText ed_qqnumber;</div><div class="line">	<span class="keyword">private</span> EditText ed_qqpassword;</div><div class="line">	<span class="keyword">private</span> CheckBox cbx;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		<span class="comment">//去掉标题栏</span></div><div class="line">		requestWindowFeature(Window.FEATURE_NO_TITLE);   </div><div class="line">		setContentView(R.layout.activity_main);</div><div class="line">		</div><div class="line">		<span class="comment">//初始化控件</span></div><div class="line">		ed_qqnumber = (EditText) findViewById(R.id.qqnumber);</div><div class="line">        ed_qqpassword = (EditText) findViewById(R.id.qqpassword);</div><div class="line">        cbx = (CheckBox) findViewById(R.id.remember);</div><div class="line">        </div><div class="line">        <span class="comment">//回显数据</span></div><div class="line">        File file = <span class="keyword">new</span> File(<span class="keyword">this</span>.getFilesDir(),<span class="string">"info.txt"</span>);</div><div class="line">        <span class="comment">//判断文件是否存在且有内容</span></div><div class="line">        <span class="keyword">if</span>(file.exists() &amp;&amp; file.length()&gt;<span class="number">0</span>)&#123;</div><div class="line">        	<span class="keyword">try</span> &#123;</div><div class="line">        		<span class="comment">//读取文件数据，然后回显</span></div><div class="line">				BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(file));</div><div class="line">				String readLine = bufferedReader.readLine();</div><div class="line">				String number = readLine.split(<span class="string">"##"</span>)[<span class="number">0</span>];</div><div class="line">				String password = readLine.split(<span class="string">"##"</span>)[<span class="number">1</span>];</div><div class="line">				ed_qqnumber.setText(number);</div><div class="line">				ed_qqpassword.setText(password);</div><div class="line">				</div><div class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">				<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">			&#125;</div><div class="line">        	</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//点击登录后会执行login 方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span> <span class="params">(View v)</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="comment">//获取输入框中写入者值</span></div><div class="line">		String number = ed_qqnumber.getText().toString().trim();</div><div class="line">		String password = ed_qqpassword.getText().toString().trim();</div><div class="line">		</div><div class="line">		<span class="comment">// 判断是否填入了number以及 password的值 </span></div><div class="line">		<span class="keyword">if</span>(TextUtils.isEmpty(number)||TextUtils.isEmpty(password))&#123;</div><div class="line">			<span class="comment">//给用户提示, 输入账号和密码</span></div><div class="line">			Toast.makeText(<span class="keyword">this</span>, <span class="string">"账号和密码不能为空"</span>, <span class="number">0</span>).show();</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">//判断是否勾选了checkbox ,如果勾选了checkbox ,那么就将 qq号和密码保存起来 </span></div><div class="line">		<span class="keyword">boolean</span> isChecked = cbx.isChecked();</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(isChecked)&#123;</div><div class="line">			</div><div class="line">			<span class="comment">//在勾选了checkbox的时候, 将数据保存起来 </span></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				File file = <span class="keyword">new</span> File(<span class="keyword">this</span>.getFilesDir(), <span class="string">"info.txt"</span>);</div><div class="line">				OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">				String value = number + <span class="string">"##"</span> + password;</div><div class="line">				outputStream.write(value.getBytes());</div><div class="line">				outputStream.close();</div><div class="line">				</div><div class="line">				Toast.makeText(<span class="keyword">this</span>, <span class="string">"保存成功"</span>, <span class="number">0</span>).show();</div><div class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">				<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">				Toast.makeText(<span class="keyword">this</span>, <span class="string">"保存失败"</span>, <span class="number">0</span>).show();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>保存成功就会在file文件夹下产生保存了帐号密码的文件，如下图<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/QQ%E5%9B%BE%E7%89%8720160513201534.png" alt=""></p>
<p>有时候一些临时数据需要保存起来,只需要把<code>new File(this.getFilesDir(),&quot;info.txt&quot;)</code>改成<code>new File(this.getCacheDir(),&quot;info.txt&quot;)</code>，文件就会保存到cache文件夹下，也就是应用程序的缓存目录。<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/QQ%E5%9B%BE%E7%89%8720160513203027.png" alt=""></p>
<h2 id="保存数据文件到SD卡中"><a href="#保存数据文件到SD卡中" class="headerlink" title="保存数据文件到SD卡中"></a>保存数据文件到SD卡中</h2><p>保存数据到sd 卡中需要申请权限</p>
<p>sdcard 做为一个外部的存储设备,有时候sdcard是处于弹出状态,未插入状态, 强制拔出状态. 那么在这些情况下,如果 要向sdcard 中写数据, 为了保证数据确切的存储, 提高用户的感受, 所以在存储到sd 卡中之前, 会去动态判断 sdcard 的状态,只有在sdcard 是处于挂载的状态下,再去 写 sd 卡数据 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(isChecked)&#123;</div><div class="line">    		<span class="comment">//在勾选了checkbox的时候, 将数据保存起来 </span></div><div class="line">    		<span class="keyword">try</span> &#123;</div><div class="line">    			<span class="comment">//细节 一 : </span></div><div class="line">    			<span class="comment">// 判断sdcar的 状态 </span></div><div class="line">    			String status = Environment.getExternalStorageState();</div><div class="line">    			</div><div class="line">    			<span class="comment">// 这里status动态的返回的 sd 卡的状态 </span></div><div class="line">    			</div><div class="line">    			<span class="comment">// 如果是mouted --- 挂载 , 那么这个时候 可以去 写 数据到 sd 卡中</span></div><div class="line">    			<span class="keyword">if</span>(!Environment.MEDIA_MOUNTED.equals(status))&#123;</div><div class="line">    				</div><div class="line">    				<span class="comment">// 表示sd 卡未挂载, 那么 这个时候 就提示用户  检查sd 卡的状态 </span></div><div class="line">    				</div><div class="line">    				Toast.makeText(<span class="keyword">this</span>, <span class="string">"请检查 sd 卡的状态 "</span>, <span class="number">0</span>).show();</div><div class="line">    				<span class="keyword">return</span>;</div><div class="line">    			&#125;</div><div class="line">    			</div><div class="line">    			<span class="comment">// 细节二 :</span></div><div class="line">    			</div><div class="line">    			<span class="comment">// 返回可用的 空闲的 空间 大小   ---- in bytes</span></div><div class="line">    			<span class="keyword">long</span> freeSpace = Environment.getExternalStorageDirectory().getFreeSpace();</div><div class="line">    			</div><div class="line">    			<span class="comment">//拿到 sd 卡的总的大小,   in bytes</span></div><div class="line">    			Environment.getExternalStorageDirectory().getTotalSpace();</div><div class="line">    			</div><div class="line">    			<span class="comment">//拿到 sd 卡 已经使用的 的大小,   in bytes</span></div><div class="line">    			Environment.getExternalStorageDirectory().getUsableSpace();</div><div class="line">    			</div><div class="line">    			<span class="comment">// 调用这个api 去获得sd卡的可用 控件，这里还做了一个事, 将返回的字节 空间 做了单位的</span></div><div class="line">    			<span class="comment">// 转换 </span></div><div class="line">    			String avalableSize = Formatter.formatFileSize(<span class="keyword">this</span>, freeSpace);</div><div class="line">    			</div><div class="line">    			Toast.makeText(<span class="keyword">this</span>,<span class="string">"可用的 空间 是 : "</span>+ avalableSize, <span class="number">0</span>).show();</div><div class="line">    			</div><div class="line">    			</div><div class="line">    			</div><div class="line">				File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(),<span class="string">"info.txt"</span>);</div><div class="line">				OutputStream out = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">				String value = number+<span class="string">"##"</span>+password;</div><div class="line">				</div><div class="line">				out.write(value.getBytes());</div><div class="line">				out.close();</div><div class="line">				</div><div class="line">				Toast.makeText(<span class="keyword">this</span>, <span class="string">"保存成功"</span>, <span class="number">0</span>).show();</div><div class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">				Toast.makeText(<span class="keyword">this</span>, <span class="string">"保存失败"</span>, <span class="number">0</span>).show();</div><div class="line">			&#125;</div><div class="line">    		</div><div class="line">    	&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[为博文添加出处和版权声明]]></title>
      <url>http://shenshanlaoyuan.com/2016/04/25/Hexo/%E4%B8%BA%E5%8D%9A%E6%96%87%E6%B7%BB%E5%8A%A0%E5%87%BA%E5%A4%84%E5%92%8C%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E/</url>
      <content type="html"><![CDATA[<p>自己写博客也有一段时间了，主要是分享自己的学习心得和总结。最近发现有的网站用爬虫抓取我的博文，连作者和出处都没标明。所以自己谷歌找了一个解决办法，如下文。</p>
<a id="more"></a><span class='source'><blockquote><p>转载请注明出处：http://shenshanlaoyuan.com/2016/04/25/Hexo/为博文添加出处和版权声明/</p><p>访问原文「<a href='http://shenshanlaoyuan.com/2016/04/25/Hexo/为博文添加出处和版权声明/'>为博文添加出处和版权声明</a>」获取最佳阅读体验并参与讨论</p></blockquote></span>
<script type="text/javascript">
(function() {
  Element.prototype.remove = function() {
    this.parentElement.removeChild(this);
  }
  NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
    for(var i = this.length - 1; i >= 0; i--) {
        if(this[i] && this[i].parentElement) {
            this[i].parentElement.removeChild(this[i]);
        }
    }
  }
  var domain = document.domain;
  var white_list = ['shenshanlaoyuan.com', 'localhost'];
  if (white_list.indexOf(domain) >= 0) {
    var elements = document.getElementsByClassName('source');
    elements.remove();
  }
})()
</script>
 
<p>我这博客用的是hexo搭建的，所以用的是hexo插件的解决办法。</p>
<ul>
<li>安装插件</li>
</ul>
<p>在博客目录下打开git bash,输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-filter-indicate-the-source --save</div></pre></td></tr></table></figure></p>
<ul>
<li>在 _config.yml文件配置</li>
</ul>
<p>在站点配置文件_config.yml添加如下配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">indicate_the_source:</div><div class="line">  pattern: indicate-the-source</div><div class="line">  enable: true</div><div class="line">  render_engine: ejs</div><div class="line">  element_class: source</div><div class="line">  domain_white_list:</div><div class="line">    - shenshanlaoyuan.com</div><div class="line">    - localhost</div><div class="line">  template: "<span class="tag">&lt;<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>转载请注明出处：<span class="tag">&lt;<span class="name">%-</span> <span class="attr">post.permalink</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>访问原文「<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'&lt;%- post.permalink %&gt;'</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">post.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>」获取最佳阅读体验并参与讨论<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span>"</div></pre></td></tr></table></figure>
<p>只要把domain_white_list域里面的域名改成你的就行了。</p>
<p>这些作用域的意思请参考<a href="https://blog.jamespan.me/2016/01/15/do-not-forget-to-indicate-the-source/" target="_blank" rel="external">《如果你转载文章不注明出处》</a></p>
<ul>
<li>文章中写法</li>
</ul>
<p>只要在文章截断<code>&lt;!-- more --&gt;</code> 的后面追加 <code>&lt;!-- indicate-the-source --&gt;</code>就可以了</p>
<p>显示效果如图<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/QQ%E5%9B%BE%E7%89%8720160425134423.png" alt=""><br>红色框里面就是多显示的内容。因为刚才在domain_white_list域填写了你自己的域名，所以在你自己的博客中这些内容不显示的。</p>
<ul>
<li>添加<a href="http://creativecommons.net.cn/" target="_blank" rel="external">知识共享协议</a><br>Creative Commons协议具体内容详见这篇文章<a href="http://blog.csdn.net/biaobiaoqi/article/details/9296129" target="_blank" rel="external">《给博客配上CC协议》</a></li>
</ul>
<p>只要在博文末尾添加下面段代码就行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/cn/&quot;&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;https://i.creativecommons.org/l/by-nc-sa/3.0/cn/80x15.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;本作品采用&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/cn/&quot;&gt;知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议&lt;/a&gt;进行许可。</div></pre></td></tr></table></figure></p>
<p>显示效果见本文末尾</p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/3.0/cn/80x15.png"></a><br>本作品采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank">知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议</a>进行许可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[这两天有些伤感了]]></title>
      <url>http://shenshanlaoyuan.com/2016/04/17/%E9%9A%8F%E7%AC%94/%E6%83%85%E4%B8%8D%E7%9F%A5%E6%89%80%E8%B5%B7%EF%BC%8C%E4%B8%80%E5%BE%80%E8%80%8C%E6%B7%B1/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">情不知所起，一往而深！</blockquote>

<p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/20131002185038_z5ktN.jpeg" alt=""></p>
<a id="more"></a> 
<p>只愿得一人心，白首不分离。这清晰的话语，嘲笑孤单的自己!</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=26427662&auto=1&height=66"></iframe>


<p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/u=1809226659,1818775413&amp;fm=21&amp;gp=0.jpg" alt=""></p>
<blockquote class="blockquote-center">去年今日此门中，<br>人面桃花相映红。<br>人面不知何处在，<br>桃花依旧笑春风。</blockquote>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中点击事件四种响应方式]]></title>
      <url>http://shenshanlaoyuan.com/2016/04/16/Android/android%E4%B8%AD%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E5%9B%9B%E7%A7%8D%E5%93%8D%E5%BA%94%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="点击事件的四种写法："><a href="#点击事件的四种写法：" class="headerlink" title="点击事件的四种写法："></a>点击事件的四种写法：</h2><ol>
<li>xml文件中指定view的onClick属性，利用反射的方式调用对应Activity中的click()方法</li>
<li>匿名内部类</li>
<li>内部类实现OnClickListener接口</li>
<li>当前类直接实现OnClickListener接口<a id="more"></a>
</li>
</ol>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="http://music.163.com/outchain/player?type=2&id=5259541&auto=1&height=32"></iframe>

<h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><p>xml文件中指定view的onClick属性，利用反射的方式调用对应Activity中的click()方法<br>xml文件中代码:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_button"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:onClick</span>=<span class="string">"click"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"按钮"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>Activity中代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.</div><div class="line">                onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"第一种方式"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><p>匿名内部类<br>Activity中代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Button button = (Button) findViewById(R.id.btn_button);</div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"第二种方式"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="第三种方式"><a href="#第三种方式" class="headerlink" title="第三种方式"></a>第三种方式</h3><p>内部类实现OnClickListener接口<br>Activity中代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Button button = (Button) findViewById(R.id.btn_button);</div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> MyOnClickListener());</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyOnClickListener</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"第三种方式"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="第四种方式"><a href="#第四种方式" class="headerlink" title="第四种方式"></a>第四种方式</h3><p>当前类实现OnClickListener接口<br>Activity中代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Button button = (Button) findViewById(R.id.btn_button);</div><div class="line">        button.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"第四种方式"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>第四种用的比较多，第一种方式不推荐，违背了解耦设计思想。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[AndroidStudio快捷键汇总]]></title>
      <url>http://shenshanlaoyuan.com/2016/04/15/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/AndroidStudio%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<blockquote>
<p>方便自己查找，有错误请指出</p>
</blockquote>
<a id="more"></a> 
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="http://music.163.com/outchain/player?type=2&id=110236&auto=1&height=32"></iframe>

<h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><table>
<thead>
<tr>
<th><strong>按键</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>F1</td>
<td>帮助</td>
</tr>
<tr>
<td>Alt(Option)+F1</td>
<td>查找文件所在目录位置</td>
</tr>
<tr>
<td>Alt(Option)+1</td>
<td>快速打开或隐藏工程面板</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+</td>
<td>打开设置对话框</td>
</tr>
<tr>
<td>Alt(Option)+Home</td>
<td>跳转到导航栏</td>
</tr>
<tr>
<td>Esc</td>
<td>光标返回编辑框</td>
</tr>
<tr>
<td>Shift+Esc</td>
<td>光标返回编辑框,关闭无用的窗口</td>
</tr>
<tr>
<td>Shift+Click</td>
<td>关闭标签页</td>
</tr>
<tr>
<td>F12</td>
<td>把焦点从编辑器移到最近使用的工具窗口</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+Y</td>
<td>同步</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+S</td>
<td>打开设置对话框</td>
</tr>
<tr>
<td>Alt(Option)+Shift+Inert</td>
<td>开启/关闭列选择模式</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+Shift+S</td>
<td>打开当前项目/模块属性</td>
</tr>
<tr>
<td>Alt(Option)+Shift+C</td>
<td>查看文件的变更历史</td>
</tr>
<tr>
<td>Ctrl(Command)+Shift+F10</td>
<td>运行</td>
</tr>
<tr>
<td>Ctrl(Command)+Shift+F9</td>
<td>debug运行</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+F12</td>
<td>资源管理器打开文件夹</td>
</tr>
</tbody>
</table>
<h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><table>
<thead>
<tr>
<th><strong>按键</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl(Command)+C</td>
<td>复制当前行或选中的内容</td>
</tr>
<tr>
<td>Ctrl(Command)+D</td>
<td>粘贴当前行或选中的内容</td>
</tr>
<tr>
<td>Ctrl(Command)+X</td>
<td>剪切当前行或选中的内容</td>
</tr>
<tr>
<td>Ctrl(Command)+Y</td>
<td>删除行</td>
</tr>
<tr>
<td>Ctrl(Command)+Z</td>
<td>倒退</td>
</tr>
<tr>
<td>Ctrl(Command)+Shift+Z</td>
<td>向前</td>
</tr>
<tr>
<td>Alt(Option)+Enter</td>
<td>自动修正</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+L</td>
<td>格式化代码</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+I</td>
<td>将选中的代码进行自动缩进编排</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+O</td>
<td>优化导入的类和包</td>
</tr>
<tr>
<td>Alt(Option)+Insert</td>
<td>得到一些Intention Action，可以生成构造器、Getter、Setter、将 == 改为 equals() 等</td>
</tr>
<tr>
<td>Ctrl(Command)+Shift+V</td>
<td>选最近使用的剪贴板内容并插入</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+Shift+V</td>
<td>简单粘贴</td>
</tr>
<tr>
<td>Ctrl(Command)+Shift+Insert</td>
<td>选最近使用的剪贴板内容并插入（同Ctrl(Command)+Shift+V）</td>
</tr>
<tr>
<td>Ctrl(Command)+Enter</td>
<td>在当前行的上面插入新行，并移动光标到新行（此功能光标在行首时有效）</td>
</tr>
<tr>
<td>Shift+Enter</td>
<td>在当前行的下面插入新行，并移动光标到新行</td>
</tr>
<tr>
<td>Ctrl(Command)+J</td>
<td>自动代码</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+T</td>
<td>把选中的代码放在 try{} 、if{} 、 else{} 里</td>
</tr>
<tr>
<td>Shift+Alt(Option)+Insert</td>
<td>竖编辑模式</td>
</tr>
<tr>
<td>Ctrl(Command)+ /</td>
<td>注释 //</td>
</tr>
<tr>
<td>Ctrl(Command)+Shift+ /</td>
<td>注释 /…/</td>
</tr>
<tr>
<td>Ctrl(Command)+Shift+J</td>
<td>合并成一行</td>
</tr>
<tr>
<td>F2/Shift+F2</td>
<td>跳转到下/上一个错误语句处</td>
</tr>
<tr>
<td>Ctrl(Command)+Shift+Back</td>
<td>跳转到上次编辑的地方</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+Space</td>
<td>类名自动完成</td>
</tr>
<tr>
<td>Shift+Alt(Option)+Up/Down</td>
<td>内容向上/下移动</td>
</tr>
<tr>
<td>Ctrl(Command)+Shift+Up/Down</td>
<td>语句向上/下移动</td>
</tr>
<tr>
<td>Ctrl(Command)+Shift+U</td>
<td>大小写切换</td>
</tr>
<tr>
<td>Tab</td>
<td>代码标签输入完成后，按 Tab，生成代码</td>
</tr>
<tr>
<td>Ctrl(Command)+Backspace</td>
<td>按单词删除</td>
</tr>
<tr>
<td>Ctrl(Command)+Shift+Enter</td>
<td>语句完成</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+J</td>
<td>用动态模板环绕</td>
</tr>
</tbody>
</table>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><table>
<thead>
<tr>
<th><strong>按键</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl(Command)+F12</td>
<td>显示当前文件的结构</td>
</tr>
<tr>
<td>Ctrl(Command)+H</td>
<td>显示类继承结构图</td>
</tr>
<tr>
<td>Ctrl(Command)+Q</td>
<td>显示注释文档</td>
</tr>
<tr>
<td>Ctrl(Command)+P</td>
<td>方法参数提示</td>
</tr>
<tr>
<td>Ctrl(Command)+U</td>
<td>打开当前类的父类或者实现的接口</td>
</tr>
<tr>
<td>Alt(Option)+Left/Right</td>
<td>切换代码视图</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+Left/Right</td>
<td>返回上次编辑的位置</td>
</tr>
<tr>
<td>Alt(Option)+Up/Down</td>
<td>在方法间快速移动定位</td>
</tr>
<tr>
<td>Ctrl(Command)+B</td>
<td>快速打开光标处的类或方法</td>
</tr>
<tr>
<td>Ctrl(Command)+W</td>
<td>选中代码，连续按会有其他效果</td>
</tr>
<tr>
<td>Ctrl(Command)+Shift+W</td>
<td>取消选择光标所在词</td>
</tr>
<tr>
<td>Ctrl(Command)+ - / +</td>
<td>折叠/展开代码</td>
</tr>
<tr>
<td>Ctrl(Command)+Shift+ - / +</td>
<td>折叠/展开全部代码</td>
</tr>
<tr>
<td>Ctrl(Command)+Shift+.</td>
<td>折叠/展开当前花括号中的代码</td>
</tr>
<tr>
<td>Ctrl(Command)+ ] / [</td>
<td>跳转到代码块结束/开始处</td>
</tr>
<tr>
<td>F2 或 Shift+F2</td>
<td>高亮错误或警告快速定位</td>
</tr>
<tr>
<td>Ctrl(Command)+Shift+C</td>
<td>复制路径</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+Shift+C</td>
<td>复制引用，必须选择类名</td>
</tr>
<tr>
<td>Alt(Option)+Up/Down</td>
<td>在方法间快速移动定位</td>
</tr>
<tr>
<td>Shift+F1</td>
<td>要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器</td>
</tr>
<tr>
<td>Ctrl(Command)+G</td>
<td>定位行</td>
</tr>
</tbody>
</table>
<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><table>
<thead>
<tr>
<th><strong>按键</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl(Command)+F</td>
<td>在当前窗口查找文本</td>
</tr>
<tr>
<td>Ctrl(Command)+Shift+F</td>
<td>在指定环境下查找文本</td>
</tr>
<tr>
<td>F3</td>
<td>向下查找关键字出现位置</td>
</tr>
<tr>
<td>Shift+F3</td>
<td>向上一个关键字出现位置</td>
</tr>
<tr>
<td>Ctrl(Command)+R</td>
<td>在当前窗口替换文本</td>
</tr>
<tr>
<td>Ctrl(Command)+Shift+R</td>
<td>在指定窗口替换文本</td>
</tr>
<tr>
<td>Ctrl(Command)+N</td>
<td>查找类</td>
</tr>
<tr>
<td>Ctrl(Command)+Shift+N</td>
<td>查找文件</td>
</tr>
<tr>
<td>Ctrl(Command)+Shift+Alt(Option)+N</td>
<td>查找项目中的方法或变量</td>
</tr>
<tr>
<td>Ctrl(Command)+B</td>
<td>查找变量的来源</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+B</td>
<td>跳转到类或方法实现处</td>
</tr>
<tr>
<td>Ctrl(Command)+Shift+B</td>
<td>快速打开光标处的类或方法</td>
</tr>
<tr>
<td>Ctrl(Command)+E</td>
<td>最近打开的文件</td>
</tr>
<tr>
<td>Alt(Option)+F3</td>
<td>快速查找，效果和Ctrl(Command)+F相同</td>
</tr>
<tr>
<td>F4</td>
<td>跳转至定义变量的位置</td>
</tr>
<tr>
<td>Alt(Option)+F7</td>
<td>查询当前元素在工程中的引用</td>
</tr>
<tr>
<td>Ctrl(Command)+F7</td>
<td>查询当前元素在当前文件中的引用，然后按 F3 可以选择</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+F7</td>
<td>选中查询当前元素在工程中的引用</td>
</tr>
<tr>
<td>Ctrl(Command)+Shift+F7</td>
<td>高亮显示匹配的字符，按 Esc 高亮消失</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+F7</td>
<td>查找某个方法的所有调用地方</td>
</tr>
<tr>
<td>Ctrl(Command)+Shift+Alt(Option)+N</td>
<td>查找类中的方法或变量</td>
</tr>
<tr>
<td>Ctrl(Command)+Shift+O</td>
<td>弹出显示查找内容</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+Up/Down</td>
<td>快速跳转搜索结果</td>
</tr>
<tr>
<td>Ctrl(Command)+Shift+S</td>
<td>高级搜索、搜索结构</td>
</tr>
</tbody>
</table>
<h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><table>
<thead>
<tr>
<th><strong>按键</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>F5</td>
<td>复制</td>
</tr>
<tr>
<td>F6</td>
<td>移动</td>
</tr>
<tr>
<td>Alt(Option)+Delete</td>
<td>安全删除</td>
</tr>
<tr>
<td>Ctrl(Command)+U</td>
<td>转到父类</td>
</tr>
<tr>
<td>Ctrl(Command)+O</td>
<td>重写父类的方法</td>
</tr>
<tr>
<td>Ctrl(Command)+I</td>
<td>实现方法</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+N</td>
<td>内联</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+Shift+T</td>
<td>弹出重构菜单</td>
</tr>
<tr>
<td>Shift+F6</td>
<td>重构-重命名</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+M</td>
<td>提取代码组成方法</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+C</td>
<td>将变量更改为常量</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+V</td>
<td>定义变量引用当前对象或者方法的返回值</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+F</td>
<td>将局部变量更改为类的成员变量</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+P</td>
<td>将变量更改为方法的参数</td>
</tr>
</tbody>
</table>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><table>
<thead>
<tr>
<th><strong>按键</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>F8</td>
<td>跳到下一步</td>
</tr>
<tr>
<td>Shift+F8</td>
<td>跳出函数、跳到下一个断点</td>
</tr>
<tr>
<td>Alt(Option)+Shift+F8</td>
<td>强制跳出函数</td>
</tr>
<tr>
<td>F7</td>
<td>进入代码</td>
</tr>
<tr>
<td>Shift+F7</td>
<td>智能进入代码</td>
</tr>
<tr>
<td>Alt(Option)+Shift+F7</td>
<td>强制进入代码</td>
</tr>
<tr>
<td>Alt(Option)+F9</td>
<td>运行至光标处</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+F9</td>
<td>强制运行至光标处</td>
</tr>
<tr>
<td>Ctrl(Command)+F2</td>
<td>停止运行</td>
</tr>
<tr>
<td>Alt(Option)+F8</td>
<td>计算变量值</td>
</tr>
</tbody>
</table>
<h2 id="VCS"><a href="#VCS" class="headerlink" title="VCS"></a>VCS</h2><table>
<thead>
<tr>
<th><strong>按键</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Alt(Option)+ ~</td>
<td>VCS 操作菜单</td>
</tr>
<tr>
<td>Ctrl(Command)+K</td>
<td>提交更改</td>
</tr>
<tr>
<td>Ctrl(Command)+T</td>
<td>更新项目</td>
</tr>
<tr>
<td>Ctrl(Command)+Alt(Option)+Shift+D</td>
<td>显示变化</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[AndroidStudio中如何使用Git和Github管理项目]]></title>
      <url>http://shenshanlaoyuan.com/2016/04/13/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/AndroidStudio%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Git%E5%92%8CGithub%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p>本文适用于window系统，Mac系统请参考。</p>
<ol>
<li>要想在AndroidStudio中使用Git，本地必须安装Git,访问<a href="https://git-for-windows.github.io/" target="_blank" rel="external">https://git-for-windows.github.io</a>下载安装。Git详细安装使用请参考<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">git教程</a></li>
<li><p>AndroidStudio中自带Git插件，只需配置下就可以。打开File-&gt;Setting-&gt;Version Control-&gt;Git，设置Git路径（需要定位到bin目录下的git.exe），再点击Test,弹出如下提示框，证明配置成功。<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/androidstudioQQ%E5%9B%BE%E7%89%8720160413145635.jpg" alt="git"></p>
<a id="more"></a>
</li>
<li><p>配置Github。打开File-&gt;Setting-&gt;Version Control-&gt;Github,设置Github帐号密码，没有就去<a href="https://github.com/" target="_blank" rel="external">官网</a>注册。输入完，点Test,弹出如下提示框，证明配置成功.<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/QQ%E5%9B%BE%E7%89%8720160413150450.png" alt="Github"></p>
</li>
<li>初始化git。打开VCS-&gt;Enable Control Integration，再选择Git。<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/androidstudio20150511162206767.jpg" alt=""><br>菜单栏就会有如下图几个按钮<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/androidstudioQQ%E5%9B%BE%E7%89%8720160413152310.png" alt=""></li>
<li>上传项目到Github前可以选择忽略上传部分文件，比如保存了数据库密码的配置文件，请参考<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013758404317281e54b6f5375640abbb11e67be4cd49e0000" target="_blank" rel="external">《忽略特殊文件》</a>。在项目根目录下的.gitignore文件配置，AndroidStudio默认帮我们配置好了，所以这步有需要可以配置。<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/androidstudioQQ%E5%9B%BE%E7%89%8720160413153406.png" alt=""></li>
<li>上传项目到Github。打开VCS&gt;Import into Version Control&gt;Share Project on GitHub<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/androidstudioQQ%E5%9B%BE%E7%89%8720160413153905.png" alt=""><br>然后再添加Github仓库名称和描述,<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/androidstudioQQ%E5%9B%BE%E7%89%8720160413154246.png" alt=""><br>上传成功，登录Github就可以看到自己上传的项目了。<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/androidstudioQQ%E5%9B%BE%E7%89%8720160413154825.png" alt=""></li>
<li>在Github看到好的项目需要克隆到AndroidStudio,可以打开VCS-&gt;Checkout from Version Control-&gt;GitHub，输入如上图HTTPS中的URL<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/androidstudioQQ%E5%9B%BE%E7%89%8720160413155451.png" alt=""></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android知识结构图]]></title>
      <url>http://shenshanlaoyuan.com/2016/04/03/Android/android%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BA%BF%E8%B7%AF%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/20141123154112649.png" alt="知识图"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[最火的Android开源项目（转载）]]></title>
      <url>http://shenshanlaoyuan.com/2016/03/28/Android/%E6%9C%80%E7%81%AB%E7%9A%84Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>了解常见的开源项目，可以扩大我们的视野，知道有哪些可以利用的资源，对于我们平常的设计和开发很有好处。当然，如果有更多时间的话，也可以专门学习某开源项目，提高自己的开发水平。<br>以下是几个网址，是从网上看到的，简单介绍了一些Android开源项目，个人觉得了解一下，对于平时开发还是很有帮助的。<br>有时间可以仔细看看。<br><a id="more"></a><br>直接拿来用！最火的Android开源项目（一）<br><a href="http://www.csdn.net/article/2013-05-03/2815127-Android-open-source-projects" target="_blank" rel="external">http://www.csdn.net/article/2013-05-03/2815127-Android-open-source-projects</a><br>直接拿来用！最火的Android开源项目（二）<br><a href="http://www.csdn.net/article/2013-05-08/2815145-Android-open-source-projects-two" target="_blank" rel="external">http://www.csdn.net/article/2013-05-08/2815145-Android-open-source-projects-two</a><br>直接拿来用！最火的Android开源项目（完结篇）<br><a href="http://www.csdn.net/article/2013-05-21/2815370-Android-open-source-projects-finale）" target="_blank" rel="external">http://www.csdn.net/article/2013-05-21/2815370-Android-open-source-projects-finale</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[跟随大神的脚步才能成长为大神-android大神Blog推荐（转）]]></title>
      <url>http://shenshanlaoyuan.com/2016/03/28/Android/%E5%A4%A7%E7%A5%9EBlog%E6%8E%A8%E8%8D%90/</url>
      <content type="html"><![CDATA[<p>发现一些非常给力的CSDNBlog和个人Blog，这些Blog都有一个共同的特点，即内容详实，讲解透彻，也算是给后来的初学者指一条路吧！只要你下定决心跟随强者的脚步，成为人们眼中的大神，只不过是时间问题！<br><a id="more"></a><br>下面排名不分先后</p>
<ul>
<li>CSDN<br>  鸿洋：<a href="http://blog.csdn.net/lmj623565791" target="_blank" rel="external">http://blog.csdn.net/lmj623565791</a><br>  爱哥：<a href="http://blog.csdn.net/aigestudio" target="_blank" rel="external">http://blog.csdn.net/aigestudio</a><br>  老罗：<a href="http://blog.csdn.net/luoshengyang" target="_blank" rel="external">http://blog.csdn.net/luoshengyang</a><br>  小巫：<a href="http://blog.csdn.net/wwj_748" target="_blank" rel="external">http://blog.csdn.net/wwj_748</a><br>  Mr.Simple：<a href="http://blog.csdn.net/bboyfeiyu" target="_blank" rel="external">http://blog.csdn.net/bboyfeiyu</a><br>  任玉刚：<a href="http://blog.csdn.net/singwhatiwanna" target="_blank" rel="external">http://blog.csdn.net/singwhatiwanna</a><br>  夏安明：<a href="http://blog.csdn.net/xiaanming" target="_blank" rel="external">http://blog.csdn.net/xiaanming</a><br>  徐医生：<a href="http://blog.csdn.net/eclipsexys" target="_blank" rel="external">http://blog.csdn.net/eclipsexys</a><br>  郭神：<a href="http://blog.csdn.net/sinyu890807/" target="_blank" rel="external">http://blog.csdn.net/sinyu890807/</a><br>  张兴业：<a href="http://blog.csdn.net/xyz_lmn/" target="_blank" rel="external">http://blog.csdn.net/xyz_lmn/</a><br>  咪当系欧巴(非常有天赋的Coder)：<a href="http://blog.csdn.net/hellogv" target="_blank" rel="external">http://blog.csdn.net/hellogv</a></li>
<li>个人Blog<br>  胡凯(android官方开发教程中文译文项目发起者)：<a href="http://hukai.me/blog/archives/" target="_blank" rel="external">http://hukai.me/blog/archives/</a><br>  码农明明桑（有审美细胞的开发者）：<a href="http://blog.isming.me/" target="_blank" rel="external">http://blog.isming.me/</a><br>  stormzhang（收到FaceBook面试邀请的大神）：<a href="http://stormzhang.com/posts.html" target="_blank" rel="external">http://stormzhang.com/posts.html</a><br>  Coder Robin：<a href="http://coderrobin.com/" target="_blank" rel="external">http://coderrobin.com/</a><br>  郝锡强：<a href="http://www.haoxiqiang.info/static/timing.html" target="_blank" rel="external">http://www.haoxiqiang.info/static/timing.html</a><br>  Trinea：<a href="http://www.trinea.cn/" target="_blank" rel="external">http://www.trinea.cn/</a><br>  农民伯伯：<a href="http://www.cnblogs.com/over140/" target="_blank" rel="external">http://www.cnblogs.com/over140/</a><br>  daimajia(北京师范大学在读研究生，SwipeLayout是ZListView产生的源头)：<a href="http://blog.daimajia.com/" target="_blank" rel="external">http://blog.daimajia.com/</a><br>  stay4it：<a href="http://www.cnblogs.com/stay/" target="_blank" rel="external">http://www.cnblogs.com/stay/</a><br>  张明云：<a href="http://zmywly8866.github.io/pages/archive.html" target="_blank" rel="external">http://zmywly8866.github.io/pages/archive.html</a></li>
<li>你要时常去看的网站<br>  Android开发者官网(你必须熟练使用翻墙)：<a href="http://developer.android.com/index.html" target="_blank" rel="external">http://developer.android.com/index.html</a><br>  GitHub(开源项目就在这里找)：<a href="https://github.com/" target="_blank" rel="external">https://github.com/</a><br>  开源项目解析：<a href="http://www.codekk.com/open-source-project-analysis" target="_blank" rel="external">http://www.codekk.com/open-source-project-analysis</a><br>  Android代码查找：<a href="https://www.codota.com/" target="_blank" rel="external">https://www.codota.com/</a> </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo搭建独立博客，托管到Github和Coding上]]></title>
      <url>http://shenshanlaoyuan.com/2016/03/28/Hexo/Hexo%E6%90%AD%E5%BB%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%EF%BC%8C%E6%89%98%E7%AE%A1%E5%88%B0Github%E5%92%8CCoding%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是一篇很详细的独立博客搭建教程，意在帮助小白们能快速入门，拥有自己的独立博客。作者已在window平台已搭建成功，博客效果请点<a href="http://shenshanlaoyuan.com/">链接</a>查看。<br><a id="more"></a></p>
<h3 id="为什么用Hexo搭建独立博客？"><a href="#为什么用Hexo搭建独立博客？" class="headerlink" title="为什么用Hexo搭建独立博客？"></a>为什么用Hexo搭建独立博客？</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h3 id="Github和Coding又是什么？"><a href="#Github和Coding又是什么？" class="headerlink" title="Github和Coding又是什么？"></a>Github和Coding又是什么？</h3><ul>
<li>Github是国外免费的Git代码托管平台。利用Github Page服务可以免费创建一个静态网站。</li>
<li>Coding则是国内Git代码托管平台。国内首个Git代码托管平台GitCafe已被Coding收购。也提供page服务。</li>
</ul>
<p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/02.png" alt="GitCafe"></p>
<h3 id="为什么用两个代码托管平台？"><a href="#为什么用两个代码托管平台？" class="headerlink" title="为什么用两个代码托管平台？"></a>为什么用两个代码托管平台？</h3><p>很多人都把hexo托管到github上，因为github大家都用的比较久了。但是，你的博客主要访问者肯定还是国内的用户，国内的用户访问coding比github是要快不少的。还可以利用域名解析实现国内的走coding，海外的走github，分流网站的访问。</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><blockquote>
<p>Git是什么？<br>Git是目前世界上最先进的分布式版本控制系统（没有之一）。<br>了解更多，参考<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">git教程</a></p>
</blockquote>
<ul>
<li><a href="https://git-for-windows.github.io/" target="_blank" rel="external">点击下载</a>，然后按默认选项安装即可。<img src="http://7xs5l8.com1.z0.glb.clouddn.com/00.png" alt="Bash"></li>
<li>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</li>
</ul>
<p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/0.jpg" alt="命令窗口"></p>
<ul>
<li>安装完成后，还需要最后一步设置，在命令行输入<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;Your Name&quot;</div><div class="line">$ git config --global user.email &quot;email@example.com&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。</p>
<p><strong>注意</strong><code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>
<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><ul>
<li>直接进入<a href="https://nodejs.org/en/" target="_blank" rel="external">官网</a> 打开Downloads</li>
<li>再点击Windows Installer下载,默认安装就行<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/%5DL@DBFJ9_MEAL~_U20K%25JPC.png" alt="node.js"><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3>打开Git-bash，输入<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure>
</li>
</ul>
<p>即可完成Hexo的安装。</p>
<h3 id="本地部署Hexo"><a href="#本地部署Hexo" class="headerlink" title="本地部署Hexo"></a>本地部署Hexo</h3><ul>
<li>在电脑磁盘新建一个存放博客目录的文件夹，例如：blog</li>
<li>进入到blog文件夹,点空白处右击鼠标，打开Git-Bash<img src="http://7xs5l8.com1.z0.glb.clouddn.com/003.png" alt="右击"></li>
<li><p>输入<code>hexo init</code> 然后 <code>npm install</code>,该文件夹有如下目录，就安装成功！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml // 网站的配置信息，你可以在此配置大部分的参数。</div><div class="line">├── package.json </div><div class="line">├── scaffolds // 模板文件夹。当你新建文章时，Hexo会根据scaffold来建立文件。</div><div class="line">├── source // 存放用户资源的地方</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes // 存放网站的主题。Hexo会根据主题来生成静态页面。</div></pre></td></tr></table></figure>
</li>
<li><p>输入<code>hexo s</code> 启动博客</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div><div class="line">INFO  Start processing</div><div class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure>
</li>
<li><p>打开浏览器输入 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 即可访问</p>
<h3 id="将博客托管到Github和Coding上"><a href="#将博客托管到Github和Coding上" class="headerlink" title="将博客托管到Github和Coding上"></a>将博客托管到Github和Coding上</h3><h4 id="托管到github"><a href="#托管到github" class="headerlink" title="托管到github"></a>托管到github</h4></li>
<li>注册github帐号<br>访问<a href="https://github.com/" target="_blank" rel="external">官网</a>注册,你的username和邮箱十分重要，GitHub上很多通知都是通过邮箱的。比如你的主页上传并构建成功会通过邮箱通知，更重要的是，如果构建失败的话也会在邮件中说明原因。</li>
<li>创建项目仓库<br>注册并登陆Github官网成功后，点击页面右上角的+，选择New repository。<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan20163281.png" alt="+"><br>在Repository name中填写Github账号名.github.io<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan%E6%88%AA%E5%9B%BE02.png" alt="创建仓库"><br>点击Create repository，完成创建。<h4 id="托管到coding"><a href="#托管到coding" class="headerlink" title="托管到coding"></a>托管到coding</h4></li>
<li>注册coding帐号<br>访问<a href="https://coding.net/" target="_blank" rel="external">官网</a>注册并登录</li>
<li>创建仓库<br>点+创建项目<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan%E6%88%AA%E5%9B%BE04.png" alt="+"><br>填写项目名称描述创建即可,<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan1637925-3cbdade49c4ed7ba.png" alt="创建"><h4 id="配置SHH"><a href="#配置SHH" class="headerlink" title="配置SHH"></a>配置SHH</h4>配置shh key是让本地git项目与远程的github建立联系</li>
<li><p>检查是否已经有SSH Key，打开Git Bash，输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ~/.ssh</div></pre></td></tr></table></figure>
</li>
<li><p>如果没有.ssh这个目录，则生成一个新的SSH，输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;your e-mail&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>注意1: 此处的邮箱地址，你可以输入自己的邮箱地址；注意2: 此处的「-C」的是大写的「C」</p>
<ul>
<li>接下来几步都直接按回车键,然后系统会要你输入密码<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;</div><div class="line">Enter same passphrase again:&lt;再次输入加密串&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。<br>注意：输入密码的时候没有*字样的，你直接输入就可以了。</p>
<ul>
<li>最后看到这样的界面，就成功设置ssh key了<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhanssh%20key.jpg" alt="ssh key"><h4 id="添加-SSH-Key-到-GitHub和Coding"><a href="#添加-SSH-Key-到-GitHub和Coding" class="headerlink" title="添加 SSH Key 到 GitHub和Coding"></a>添加 SSH Key 到 GitHub和Coding</h4></li>
<li><p>打开Git Bash，然后输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ~/.ssh</div></pre></td></tr></table></figure>
</li>
<li><p>进入到.shh文件夹中再输入ls，查看是否有id_rsa.pub文件<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan%E6%88%AA%E5%9B%BE05.png" alt=""></p>
</li>
<li>输入cat命令，打开id_rsa.pub文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat id_rsa.pub</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan%E6%88%AA%E5%9B%BE06.png" alt=""></p>
<ul>
<li>再鼠标全选中右击复制</li>
<li>再配置到GitHub和Coding的SSH中<br>进入Github官网，点击+旁边的头像，再按settings进入设置<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan%E6%88%AA%E5%9B%BE07.png" alt=""><br>在点击New SSH key创建<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan%E6%88%AA%E5%9B%BE08.png" alt=""><br>title输入邮箱，key里面粘贴刚才右击复制的内容,再点Add SSH key<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan%E6%88%AA%E5%9B%BE10.png" alt=""><br>同样进入coding,点击账户，在点SSH公钥设置即可<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan%E6%88%AA%E5%9B%BE11.png" alt=""><h4 id="测试SSH是否配置成功"><a href="#测试SSH是否配置成功" class="headerlink" title="测试SSH是否配置成功"></a>测试SSH是否配置成功</h4></li>
<li><p>打开Git Bash，然后输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure>
</li>
<li><p>如配置了密码则要输入密码,输完按回车<br>如果显示以下内容，则说明Github中的ssh配置成功。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Hi username! You&apos;ve successfully authenticated, but GitHub does not</div><div class="line">provide shell access.</div></pre></td></tr></table></figure>
</li>
<li><p>再输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@git.coding.net</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果显示以下则说明coding中的ssh配置成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello username You&apos;ve connected to Coding.net by SSH successfully!</div></pre></td></tr></table></figure></p>
<h4 id="创建Github-Pages和Coding-Pages-服务"><a href="#创建Github-Pages和Coding-Pages-服务" class="headerlink" title="创建Github Pages和Coding Pages 服务"></a>创建Github Pages和Coding Pages 服务</h4><ul>
<li>GitHub Pages分两种，一种是你的GitHub用户名建立的username.github.io这样的用户&amp;组织页（站），另一种是依附项目的pages。想建立个人博客是用的第一种，形如cnfeat.github.io这样的可访问的站，每个用户名下面只能建立一个。<a href="https://help.github.com/articles/user-organization-and-project-pages/" target="_blank" rel="external">更多</a></li>
<li>官网点击代码再点击Coding Pages 服务开启。分支和github分支写一样，填写master<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan%E6%88%AA%E5%9B%BE13.png" alt=""><h4 id="将博客网站上传到GitHub和Coding中"><a href="#将博客网站上传到GitHub和Coding中" class="headerlink" title="将博客网站上传到GitHub和Coding中"></a>将博客网站上传到GitHub和Coding中</h4></li>
<li>打开D:\blog文件夹中的_config.yml文件，找到如下位置，填写<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo:</div><div class="line">      github: git@github.com:yourname/yourname.github.io.git,master</div><div class="line">      coding: git@git.coding.net:yourname/yourname.git,master</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>注：</strong> (1) 其中yourname替换成你的Github账户名;(2)注意在yml文件中，:后面都是要带空格的。<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan%E6%88%AA%E5%9B%BE14.png" alt=""></p>
<ul>
<li>在<strong>blog文件夹</strong>中空白处右击打开Git Bash输入<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div><div class="line">hexo g #生成静态网页</div><div class="line">hexo d #开始部署</div></pre></td></tr></table></figure>
</li>
</ul>
<p>此时，通过访问<a href="http://yourname.github.io和[http://yourname.coding.me]()可以看到默认的Hexo首页面（与之前本地测试时一样）。" target="_blank" rel="external">http://yourname.github.io和[http://yourname.coding.me]()可以看到默认的Hexo首页面（与之前本地测试时一样）。</a></p>
<h4 id="更换Hexo主题"><a href="#更换Hexo主题" class="headerlink" title="更换Hexo主题"></a>更换Hexo主题</h4><p>本网站使用的是Next主题。该主题简洁易用，在移动端也表现不错。</p>
<ul>
<li><p>下载主题<br>在<strong>blog文件夹</strong>中空白处右击打开Git Bash输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
</li>
<li><p>修改网站的主题为Next<br>打开D:\blog下的_config.yml文件，找到theme字段，将其修改为next</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">## Plugins: http://hexo.io/plugins/</div><div class="line">## Themes: http://hexo.io/themes/</div><div class="line">theme: next</div></pre></td></tr></table></figure>
</li>
<li><p>验证主题是否可用<br>输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s #启动服务，调试用</div></pre></td></tr></table></figure>
</li>
</ul>
<p>再在浏览器输入<a href="http://localhost:4000/确认网站主题是否切换为Next" target="_blank" rel="external">http://localhost:4000/确认网站主题是否切换为Next</a>.</p>
<ul>
<li>博客blog根目录下的_config.yml配置网站信息<br>_config.yml配置请点<a href="https://github.com/xirong/hexo-theme-next/blob/master/_config_root.yml" target="_blank" rel="external">参考</a><h3 id="注册及绑定自己的域名地址"><a href="#注册及绑定自己的域名地址" class="headerlink" title="注册及绑定自己的域名地址"></a>注册及绑定自己的域名地址</h3><h4 id="域名注册"><a href="#域名注册" class="headerlink" title="域名注册"></a>域名注册</h4>推荐选择国内的万网或者国外的Goddady进行域名的注册，注册完还需改下绑定DNS服务商<h4 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h4>如果你选择的是万网注册的域名，可以使用其自带的域名解析服务。<br>也可以选择免费的<a href="https://www.dnspod.cn/" target="_blank" rel="external">DNSPod</a></li>
<li>域名解析填写如下图<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan1637925-bc9fbfb9af5e3b77.png" alt=""></li>
<li>打开blog文件夹下的source文件夹，新建CNAME文件,内容填写自己的域名<br>CNAME文件设置的目的是，通过访问 yourname.github.io 可以跳转到你所注册的域名上。<br>github是直接项目里面加CNAME文件。coding是直接在项目主页设置的，去coding项目主页添加CNAME，绑定域名。<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>只要按照上面步骤一步步设置，相信你也可以拥有自己的独立博客。希望此文对还在搭建hexo独立博客的小伙伴有所帮助。主题相关配置查看下面的，hexo和next帮助文档。<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3></li>
<li><a href="http://www.jeyzhang.com/hexo-github-blog-building.html" target="_blank" rel="external">《Hexo+Github: 搭建属于自己的静态博客》</a></li>
<li><a href="http://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool" target="_blank" rel="external">《hexo你的博客》</a></li>
<li><a href="http://blog.shijinrong.cn/2016/01/03/2016-01-03-how-to-build-blog/" target="_blank" rel="external">《如何使用10个小时搭建出个人域名而又Geek的独立博客？》</a></li>
<li><a href="http://tengj.top/2016/03/06/hexo%E5%B9%B2%E8%B4%A7%E7%B3%BB%E5%88%97%EF%BC%9A%EF%BC%88%E5%9B%9B%EF%BC%89%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E5%90%8C%E6%97%B6%E6%89%98%E7%AE%A1%E5%88%B0github%E5%92%8Ccoding/" target="_blank" rel="external">《将hexo博客同时托管到github和coding》</a></li>
<li><a href="https://segmentfault.com/q/1010000004557073?_ea=651524" target="_blank" rel="external">《个人域名如何同时绑定 github 和 coding 上的博客》</a></li>
<li><a href="http://blog.csdn.net/poem_of_sunshine/article/details/29369785/" target="_blank" rel="external">《如何搭建一个独立博客——简明Github Pages与Hexo教程》</a></li>
<li><a href="http://mousycoder.com/2015/10/19/classic-tutorial-of-hexo-blog/" target="_blank" rel="external">《「搭建Hexo博客」简明教程》</a></li>
<li><a href="http://www.ixirong.com/2015/05/17/how-to-build-ixirong-blog/" target="_blank" rel="external">《使用 github Pages 服务建立 ixirong.com 独立博客全过程》</a><h3 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h3></li>
<li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">《Hexo文档》</a></li>
<li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">《Next使用文档》</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">《Git教程》</a></li>
<li><a href="https://help.github.com/" target="_blank" rel="external">《Github帮助文档》</a></li>
<li><a href="https://coding.net/help/" target="_blank" rel="external">《Coding帮助文档》</a></li>
<li><a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">《Markdown 语法说明》</a><h2 id="更多教程可以来我深山老猿独立博客里面看到"><a href="#更多教程可以来我深山老猿独立博客里面看到" class="headerlink" title="更多教程可以来我深山老猿独立博客里面看到"></a>更多教程可以来我<a href="http://shenshanlaoyuan.com/">深山老猿</a>独立博客里面看到</h2><strong>转载请注明出处<a href="http://shenshanlaoyuan.com/">http://shenshanlaoyuan.com/</a></strong></li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
